[{"path":"https://mtmorgan.github.io/CxGcensus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer. Chan Zuckerberg Initiative DAF CZF2019-002443. Funder.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2023). CxGcensus: Discover Retrieve 'CELLxGENE' Census Data Sets. R package version 0.0.0.9009, https://mtmorgan.github.io/CxGcensus/.","code":"@Manual{,   title = {CxGcensus: Discover and Retrieve 'CELLxGENE' Census Data Sets},   author = {Martin Morgan},   year = {2023},   note = {R package version 0.0.0.9009},   url = {https://mtmorgan.github.io/CxGcensus/}, }"},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"cxgcensus","dir":"","previous_headings":"","what":"Discover and Retrieve CELLxGENE Census Data Sets ","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"CxGcensus alternative R client CELLxGENE census. emaphsizes use cases related data discovery, uses -memory -disk caches reduce latency associated repeated queries.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"Install CxGcensus GitHub :","code":"## install.packages(\"devtools\") devtools::install_github(\"mtmorgan/CxGcensus\")"},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"data-exploration","dir":"","previous_headings":"","what":"Data exploration","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"Load package Discover datasets used construct census dataset_id collection_id can used cellxgenedp package programmatic retrieval visualization individual datasets. organisms present census (use calls feature_data() observation_data()) available Summarize information cells census Learn features (genes) , e.g., homo_sapiens datasets census Observation (cell) data annotations available observation_data(). strategy adopted download data local duckdb database. Download can time-consuming, results ‘memoised’ subsequent calls --less instantaneous. columns available cross-dataset analysis straight-forward summarize query data, e.g., number different types assays represented, studies diabetes. Use ggplot2 visualize tissue type assay.  soma_joinid tibbles returned feature_data() observation_data() important retrieving counts.","code":"library(CxGcensus) datasets() #> # A tibble: 562 × 8 #>    soma_joinid collection_id           collection_name collection_doi dataset_id #>          <int> <chr>                   <chr>           <chr>          <chr>      #>  1           0 6b701826-37bb-4356-979… Abdominal Whit… <NA>           9d8e5dca-… #>  2           1 4195ab4c-20bd-4cd3-8b3… A spatially re… <NA>           a6388a6f-… #>  3           2 4195ab4c-20bd-4cd3-8b3… A spatially re… <NA>           842c6f5d-… #>  4           3 4195ab4c-20bd-4cd3-8b3… A spatially re… <NA>           74520626-… #>  5           4 4195ab4c-20bd-4cd3-8b3… A spatially re… <NA>           396a9124-… #>  6           5 74e10dc4-cbb2-4605-a18… Spatial proteo… 10.1016/j.cel… e84f2780-… #>  7           6 74e10dc4-cbb2-4605-a18… Spatial proteo… 10.1016/j.cel… dfdf1ae2-… #>  8           7 74e10dc4-cbb2-4605-a18… Spatial proteo… 10.1016/j.cel… d1cbed97-… #>  9           8 74e10dc4-cbb2-4605-a18… Spatial proteo… 10.1016/j.cel… b03e4ef8-… #> 10           9 6d203948-a779-4b69-9b3… Differential c… 10.1016/j.cel… f1f123cc-… #> # ℹ 552 more rows #> # ℹ 3 more variables: dataset_title <chr>, dataset_h5ad_path <chr>, #> #   dataset_total_cell_count <int> census_names() #> [1] \"homo_sapiens\" \"mus_musculus\" summary_cell_counts() |>     filter(category == \"sex\") |>     select(         organism, label,         unique_cell_count, total_cell_count     ) #> # A tibble: 6 × 4 #>   organism     label   unique_cell_count total_cell_count #>   <chr>        <chr>               <int>            <int> #> 1 Homo sapiens female           14516846         22513226 #> 2 Homo sapiens male             17097019         28197731 #> 3 Homo sapiens unknown           2145022          3083771 #> 4 Mus musculus female            1066585          1431227 #> 5 Mus musculus male              1655113          2462185 #> 6 Mus musculus unknown            192620           192620 feature_data(\"mus_musculus\") #> # A tibble: 52,392 × 4 #>    soma_joinid feature_id         feature_name  feature_length #>          <int> <chr>              <chr>                  <int> #>  1           0 ENSMUSG00000109644 0610005C13Rik           3583 #>  2           1 ENSMUSG00000108652 0610006L08Rik           2128 #>  3           2 ENSMUSG00000007777 0610009B22Rik            998 #>  4           3 ENSMUSG00000086714 0610009E02Rik           1803 #>  5           4 ENSMUSG00000043644 0610009L18Rik            619 #>  6           5 ENSMUSG00000042208 0610010F05Rik           5226 #>  7           6 ENSMUSG00000020831 0610010K14Rik           1896 #>  8           7 ENSMUSG00000089755 0610012D04Rik            531 #>  9           8 ENSMUSG00000107002 0610012G03Rik           1445 #> 10           9 ENSMUSG00000046683 0610025J13Rik           1121 #> # ℹ 52,382 more rows mus <- observation_data(\"mus_musculus\") mus #> # Source:   table<obs> [?? x 21] #> # Database: DuckDB 0.8.1 [root@Darwin 21.6.0:R 4.3.0//Users/ma38727/Library/Caches/org.R-project.R/R/CxGcensus/39d32a8aa140.duckdb] #>    soma_joinid dataset_id                 assay assay_ontology_term_id cell_type #>          <int> <chr>                      <chr> <chr>                  <chr>     #>  1           0 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            mesenchy… #>  2           1 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            mesenchy… #>  3           2 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            mesothel… #>  4           3 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            mesenchy… #>  5           4 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            mesenchy… #>  6           5 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            intersti… #>  7           6 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            mesenchy… #>  8           7 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            mesenchy… #>  9           8 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            Sertoli … #> 10           9 be46dfdc-0f99-4731-8957-6… 10x … EFO:0011025            mesenchy… #> # ℹ more rows #> # ℹ 16 more variables: cell_type_ontology_term_id <chr>, #> #   development_stage <chr>, development_stage_ontology_term_id <chr>, #> #   disease <chr>, disease_ontology_term_id <chr>, donor_id <chr>, #> #   is_primary_data <lgl>, self_reported_ethnicity <chr>, #> #   self_reported_ethnicity_ontology_term_id <chr>, sex <chr>, #> #   sex_ontology_term_id <chr>, suspension_type <chr>, tissue <chr>, … mus |>     colnames() #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"self_reported_ethnicity\"                  #> [14] \"self_reported_ethnicity_ontology_term_id\" #> [15] \"sex\"                                      #> [16] \"sex_ontology_term_id\"                     #> [17] \"suspension_type\"                          #> [18] \"tissue\"                                   #> [19] \"tissue_ontology_term_id\"                  #> [20] \"tissue_general\"                           #> [21] \"tissue_general_ontology_term_id\" mus |>     count(assay, sort = TRUE) #> # Source:     SQL [9 x 2] #> # Database:   DuckDB 0.8.1 [root@Darwin 21.6.0:R 4.3.0//Users/ma38727/Library/Caches/org.R-project.R/R/CxGcensus/39d32a8aa140.duckdb] #> # Ordered by: desc(n) #>   assay                                n #>   <chr>                            <dbl> #> 1 10x 3' v3                      1925688 #> 2 10x 3' v2                      1622998 #> 3 Smart-seq2                      221648 #> 4 10x 5' v1                       161525 #> 5 Drop-seq                         80990 #> 6 Smart-seq                        48972 #> 7 10x 3' v1                        21421 #> 8 DroNc-seq                         2768 #> 9 10x 3' transcription profiling      22 mus |>     filter(grepl(\"diabetes\", disease)) |>     count(disease, sex, tissue) #> # Source:   SQL [2 x 4] #> # Database: DuckDB 0.8.1 [root@Darwin 21.6.0:R 4.3.0//Users/ma38727/Library/Caches/org.R-project.R/R/CxGcensus/39d32a8aa140.duckdb] #>   disease                  sex    tissue                  n #>   <chr>                    <chr>  <chr>               <dbl> #> 1 type 1 diabetes mellitus female islet of Langerhans 39932 #> 2 type 2 diabetes mellitus male   islet of Langerhans 99747 library(ggplot2)  ## 10 most-common tissues; total cell count common_tissues <-     mus |>     count(tissue, sort = TRUE) |>     head(10) |>     collect() |>     pull(tissue) ## assays on each tissue tissue_and_assay <-     mus |>     filter(tissue %in% common_tissues) |>     count(tissue, assay, sort = TRUE) |>     collect() ## visualize ggplot(tissue_and_assay) +     aes(x = factor(tissue, levels = common_tissues), y = n, fill = assay) +     geom_bar(position=\"stack\", stat=\"identity\") +     labs(x = \"Tissue\", y = \"Total cell count\") +     coord_flip() +     theme(legend.position = c(.8, .7))"},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"singlecellexperiment","dir":"","previous_headings":"","what":"SingleCellExperiment","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"create Bioconductor SingleCellExperiment, perhaps use one Orchestrating Single Cell Analysis Bioconductor (OSCA) workflows, first select desired features observations. illustration choose 100 random genes choose cells brain tissue development stage 20 month old latter. Cells several datasets Use create SingleCellExperiment. experiment counts() sparse (dgCMatrix, Matrix package) matrix, features observations available (Bioconductor DataFrame objects, rather tibbles) via rowData() colData(). data straight-forward work , e.g., removing features counts observed.","code":"set.seed(12) features <- feature_data(\"mus_musculus\") random_features <-     features |>     slice(sample(nrow(features), 100)) observations <- observation_data(\"mus_musculus\") brain_20mo <-     observations |>     filter(         tissue == \"brain\",         development_stage == \"20 month-old stage and over\"     ) |>     collect() brain_20mo |>     count() #> # A tibble: 1 × 1 #>       n #>   <int> #> 1 52132 brain_20mo |>     count(dataset_id) #> # A tibble: 5 × 2 #>   dataset_id                               n #>   <chr>                                <int> #> 1 3bbb6cf9-72b9-41be-b568-656de6eb18b5 38695 #> 2 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff  3077 #> 3 66ff82b4-9380-469c-bc4b-cfa08eacd325   756 #> 4 98e5ea9f-16d6-47ec-a529-686e76515e39  5180 #> 5 c08f8441-4a10-4748-872a-e70c0bcccdba  4424 sce <- single_cell_experiment(\"mus_musculus\", random_features, brain_20mo) sce #> class: SingleCellExperiment  #> dim: 100 52132  #> metadata(1): census_metadata #> assays(1): counts #> rownames: NULL #> rowData names(4): soma_joinid feature_id feature_name feature_length #> colnames: NULL #> colData names(21): soma_joinid dataset_id ... tissue_general #>   tissue_general_ontology_term_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): library(SingleCellExperiment) keep_rows <- Matrix::rowSums(counts(sce, withDimnames = FALSE)) != 0 table(keep_rows) #> keep_rows #> FALSE  TRUE  #>    56    44 sce[keep_rows,] #> class: SingleCellExperiment  #> dim: 44 52132  #> metadata(1): census_metadata #> assays(1): counts #> rownames: NULL #> rowData names(4): soma_joinid feature_id feature_name feature_length #> colnames: NULL #> colData names(21): soma_joinid dataset_id ... tissue_general #>   tissue_general_ontology_term_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"session-information","dir":"","previous_headings":"","what":"Session information","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"README compiled CxGcensus version 0.0.0.9009. Full session info :","code":"sessionInfo() #> R version 4.3.0 Patched (2023-05-01 r84362) #> Platform: aarch64-apple-darwin21.6.0 (64-bit) #> Running under: macOS Monterey 12.6.6 #>  #> Matrix products: default #> BLAS:   /Users/ma38727/bin/R-4-3-branch/lib/libRblas.dylib  #> LAPACK: /Users/ma38727/bin/R-4-3-branch/lib/libRlapack.dylib;  LAPACK version 3.11.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SingleCellExperiment_1.23.0 SummarizedExperiment_1.31.1 #>  [3] Biobase_2.61.0              GenomicRanges_1.53.1        #>  [5] GenomeInfoDb_1.37.1         IRanges_2.35.1              #>  [7] S4Vectors_0.39.1            BiocGenerics_0.47.0         #>  [9] MatrixGenerics_1.13.0       matrixStats_1.0.0           #> [11] ggplot2_3.4.2               CxGcensus_0.0.0.9009        #> [13] RcppSpdlog_0.0.13           dplyr_1.1.2                 #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.0            farver_2.1.1                #>  [3] blob_1.2.4                  urltools_1.7.3              #>  [5] arrow_12.0.1                bitops_1.0-7                #>  [7] fastmap_1.1.1               RCurl_1.98-1.12             #>  [9] duckdb_0.8.1                digest_0.6.31               #> [11] lifecycle_1.0.3             magrittr_2.0.3              #> [13] compiler_4.3.0              rlang_1.1.1                 #> [15] tools_4.3.0                 utf8_1.2.3                  #> [17] yaml_2.3.7                  data.table_1.14.8           #> [19] knitr_1.43                  S4Arrays_1.1.4              #> [21] labeling_0.4.2              bit_4.0.5                   #> [23] spdl_0.0.5                  curl_5.0.1                  #> [25] DelayedArray_0.27.5         aws.signature_0.6.0         #> [27] xml2_1.3.4                  withr_2.5.0                 #> [29] purrr_1.0.1                 triebeard_0.4.1             #> [31] grid_4.3.0                  fansi_1.0.4                 #> [33] colorspace_2.1-0            scales_1.2.1                #> [35] cli_3.6.1                   crayon_1.5.2                #> [37] rmarkdown_2.22              generics_0.1.3              #> [39] tiledbsoma_0.0.0.9028       httr_1.4.6                  #> [41] DBI_1.1.3                   cachem_1.0.8                #> [43] zlibbioc_1.47.0             assertthat_0.2.1            #> [45] XVector_0.41.1              base64enc_0.1-3             #> [47] vctrs_0.6.3                 Matrix_1.5-4.1              #> [49] jsonlite_1.8.5              bit64_4.0.5                 #> [51] glue_1.6.2                  gtable_0.3.3                #> [53] aws.s3_0.3.21               munsell_0.5.0               #> [55] nanotime_0.3.7              tibble_3.2.1                #> [57] pillar_1.9.0                htmltools_0.5.5             #> [59] GenomeInfoDbData_1.2.10     R6_2.5.1                    #> [61] dbplyr_2.3.2                evaluate_0.21               #> [63] lattice_0.21-8              RcppCCTZ_0.2.12             #> [65] highr_0.10                  cellxgene.census_0.0.0.9000 #> [67] memoise_2.0.1               tiledb_0.19.1.8             #> [69] Rcpp_1.0.10                 SparseArray_1.1.10          #> [71] xfun_0.39                   fs_1.6.2                    #> [73] zoo_1.8-12                  pkgconfig_2.0.3"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":null,"dir":"Reference","previous_headings":"","what":"On-disk cache management — cache_directory","title":"On-disk cache management — cache_directory","text":"cache_directory() reports path -disk cache particular census. cache_info() summarizes file size last modification time files cache. cache() returns object used manage cache.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"On-disk cache management — cache_directory","text":"","code":"cache_directory(id = census_id())  cache_info(id = census_id())  cache(id = census_id())"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"On-disk cache management — cache_directory","text":"id character(1) unique identifier associated particular census snapshot, returned census_id().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"On-disk cache management — cache_directory","text":"cache_directory() returns character(1) file path location cache associated census id. cache_info() returns tibble file name, size, 'mtime' (last-modified time). mtime used cache_disk() manage size age objects cache. cache() returns object created cachem::chach_disk() can used query delete items cache.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"On-disk cache management — cache_directory","text":"-disk cache created managed cache_disk() function cachem package. Consult package details working object. File names cache hash function arguments body cache; possible know transparently file corresponds memoized function.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"On-disk cache management — cache_directory","text":"","code":"cache_directory() #> [1] \"/home/runner/.cache/R/CxGcensus/1598cfd\"  cache_info() #> # A tibble: 0 × 3 #> # ℹ 3 variables: file <chr>, size <dbl>, mtime <dttm>  cache() #> <cache_disk> <cachem> #>   Methods: #>     get(key, missing = missing_) #>     set(key, value) #>     exists(key) #>     keys() #>     remove(key) #>     reset() #>     prune() #>     size() #>     destroy() #>     is_destroyed(throw = FALSE) #>     info()"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() queries CELLxGENE particulalr census. census_id() reports unique identifier particular census version. census_names() queries census available 'experiments'. CELLxGENE, experiments correspond organisms, e.g., \"homo_sapiens\" \"mus_musculus\".","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"","code":"census(census_version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)  census_id(...)  census_names(...)"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census_version see ?cellxgene.census::open_soma uri see ?cellxgene.census::open_soma tiledbsoma_ctx see ?cellxgene.census::open_soma ... arguments passed census(). census object returned census(); present, overrides specifications ....","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() returns tiledbsoma::SOMACollection object. Details census_version available census()$get_metadata() census_id() returns 7-character git commit sha uniquely identifies current release census. census_names() returns character vector possible values. Use values calls , e.g., feature_data() observation_data().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() 'memoised', requiring high-latency internet access first use.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"","code":"census() #> <SOMACollection> #>   uri: s3://cellxgene-data-public/cell-census/2023-05-15/soma/  #>   groups: census_data*, census_info*  census()$get_metadata() #> $created_on #> [1] \"2023-05-15T22:34:37+00:00\" #> attr(,\"key\") #> [1] \"created_on\" #>  #> $git_commit_sha #> [1] \"1598cfd\" #> attr(,\"key\") #> [1] \"git_commit_sha\" #>  #> $soma_encoding_version #> [1] \"1\" #> attr(,\"key\") #> [1] \"soma_encoding_version\" #>  #> $soma_object_type #> [1] \"SOMACollection\" #> attr(,\"key\") #> [1] \"soma_object_type\" #>   census_id() #> [1] \"1598cfd\"  census_names() #> [1] \"homo_sapiens\" \"mus_musculus\""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Discover census datasets, cells, features, and observations — datasets","title":"Discover census datasets, cells, features, and observations — datasets","text":"datasets() queries CELLxGENE datasets used constructing census. summary_cell_counts() reports facets (e.g., sex) levels (e.g., male, female) census, number cells associated facet level. feature_data() reports information features (genes) present census. observation_data() reports information cells census. assay_data() queries census 'raw' counts RNA-seq data corresponding selected features columns census. single_cell_experiment() queries census assay data corresponding features observations, assembles result SingleCellExperiment. count data accessible using SingleCellExperiment::counts().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discover census datasets, cells, features, and observations — datasets","text":"","code":"datasets(...)  summary_cell_counts(...)  feature_data(organism, ...)  observation_data(organism, ...)  assay_data(organism, features, observations, ...)  single_cell_experiment(organism, features, observations, ...)"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discover census datasets, cells, features, and observations — datasets","text":"... arguments passed census(), specifying census release used. missing, default (current stable) census used. organism one values returned census_names(), specifically 'homo_sapiens' 'mus_musculus' time writing documentation. features tibble, typically derived feature_data() via filter(), select(), etc., containing soma_joinid column. observations tibble, typically derived observation_data() via filter(), select(), etc., containing soma_joinid column.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discover census datasets, cells, features, and observations — datasets","text":"datasets() returns tibble information collections datasets represented census. summary_cell_counts() returns tibble summarizing organism, facets (category, e.g., 'sex') levels (label, e.g., 'female') represented data, unique total cell counts facet level. feature_data() returns tibble columns describing feature (gene) organism. observation_data() returns dbplyr-based tibble cell annotations. aesthetic problem 'connection' database available user, duckdb warns Database garbage-collected...; message can ignored. assay_data() returns sparse matrix (dgCMatrix) summarizing counts found census soma_joinid columns features observations tibble arguments. counts 'raw' layer' 'X' collection 'RNA' measurement experiment.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discover census datasets, cells, features, and observations — datasets","text":"datasets(), summary_cell_counts(), feature_data() 'memoised' expensive first use. 'tibble' returned functions memoised disk, re-using function fast even across sessions. See ?cache_info() details cache management. observation_data() memoised disk. data large (e.g., 50 million rows Homo sapiens) initial download can time-consuming (10's minutes). download interactive session, number 'chunks' records displayed; 2023-05-15 census homo_sapiens, 52 million records (cells) downloaded 124 chunks. data stored 'duckdb' database. return value can used via dbplyr fast memory efficient filtering, selection, summary. Currently, assay_data() single_cell_experiment(), user must ensure features, observations, assay data census organism. Duplicate rows features observations allowed. single_cell_experiment() requires SingleCellExperiment Biocductor package installed, e.g., via BiocManager::install(\"SingleCellExperiment\").","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discover census datasets, cells, features, and observations — datasets","text":"","code":"datasets() |>     glimpse() #> Rows: 562 #> Columns: 8 #> $ soma_joinid              <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,… #> $ collection_id            <chr> \"6b701826-37bb-4356-9792-ff41fc4c3161\", \"4195… #> $ collection_name          <chr> \"Abdominal White Adipose Tissue\", \"A spatiall… #> $ collection_doi           <chr> NA, NA, NA, NA, NA, \"10.1016/j.cell.2021.12.0… #> $ dataset_id               <chr> \"9d8e5dca-03a3-457d-b7fb-844c75735c83\", \"a638… #> $ dataset_title            <chr> \"22 integrated samples\", \"scRNA-seq data - my… #> $ dataset_h5ad_path        <chr> \"9d8e5dca-03a3-457d-b7fb-844c75735c83.h5ad\", … #> $ dataset_total_cell_count <int> 72335, 30789, 714331, 76567, 12510, 167598, 4…  summary_cell_counts() |>     count(category) #> # A tibble: 9 × 2 #>   category                    n #>   <chr>                   <int> #> 1 all                         2 #> 2 assay                      29 #> 3 cell_type                 830 #> 4 disease                    73 #> 5 self_reported_ethnicity    27 #> 6 sex                         6 #> 7 suspension_type             2 #> 8 tissue                    278 #> 9 tissue_general             88  ## number of cells from female, male, and 'unknown' samples in ## humans and mice summary_cell_counts() |>     filter(category == \"sex\") |>     select(         organism, label,         unique_cell_count, total_cell_count     ) #> # A tibble: 6 × 4 #>   organism     label   unique_cell_count total_cell_count #>   <chr>        <chr>               <int>            <int> #> 1 Homo sapiens female           14516846         22513226 #> 2 Homo sapiens male             17097019         28197731 #> 3 Homo sapiens unknown           2145022          3083771 #> 4 Mus musculus female            1066585          1431227 #> 5 Mus musculus male              1655113          2462185 #> 6 Mus musculus unknown            192620           192620  feature_data(\"mus_musculus\") #> # A tibble: 52,392 × 4 #>    soma_joinid feature_id         feature_name  feature_length #>          <int> <chr>              <chr>                  <int> #>  1           0 ENSMUSG00000109644 0610005C13Rik           3583 #>  2           1 ENSMUSG00000108652 0610006L08Rik           2128 #>  3           2 ENSMUSG00000007777 0610009B22Rik            998 #>  4           3 ENSMUSG00000086714 0610009E02Rik           1803 #>  5           4 ENSMUSG00000043644 0610009L18Rik            619 #>  6           5 ENSMUSG00000042208 0610010F05Rik           5226 #>  7           6 ENSMUSG00000020831 0610010K14Rik           1896 #>  8           7 ENSMUSG00000089755 0610012D04Rik            531 #>  9           8 ENSMUSG00000107002 0610012G03Rik           1445 #> 10           9 ENSMUSG00000046683 0610025J13Rik           1121 #> # ℹ 52,382 more rows  mus <- observation_data(\"mus_musculus\") mus |>     count(assay, sort = TRUE) #> # Source:     SQL [9 x 2] #> # Database:   DuckDB 0.8.1 [unknown@Linux 5.15.0-1040-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/1c5664db0474.duckdb] #> # Ordered by: desc(n) #>   assay                                n #>   <chr>                            <dbl> #> 1 10x 3' v3                      1925688 #> 2 10x 3' v2                      1622998 #> 3 Smart-seq2                      221648 #> 4 10x 5' v1                       161525 #> 5 Drop-seq                         80990 #> 6 Smart-seq                        48972 #> 7 10x 3' v1                        21421 #> 8 DroNc-seq                         2768 #> 9 10x 3' transcription profiling      22 mus |>     filter(grepl(\"diabetes\", disease)) |>     count(disease, sex, tissue) #> # Source:   SQL [2 x 4] #> # Database: DuckDB 0.8.1 [unknown@Linux 5.15.0-1040-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/1c5664db0474.duckdb] #>   disease                  sex    tissue                  n #>   <chr>                    <chr>  <chr>               <dbl> #> 1 type 1 diabetes mellitus female islet of Langerhans 39932 #> 2 type 2 diabetes mellitus male   islet of Langerhans 99747  features <-    feature_data(\"mus_musculus\") |>    ## rows 4, 3, 4 of the tibble    slice(c(4:3, 4))  observations <-    observation_data(\"mus_musculus\") |>    ## first two rows of the tibble    head(2) |>    collect()  counts <- assay_data(features, observations, organism = \"mus_musculus\") #> creating axis and experiment queries #> retrieving assay_data measurement 'RNA' collection 'X' layer 'raw' as a #> sparse matrix with 2 x 2 distinct features x observations  single_cell_experiment(\"mus_musculus\", features, observations) #> class: SingleCellExperiment  #> dim: 3 2  #> metadata(1): census_metadata #> assays(1): counts #> rownames: NULL #> rowData names(4): soma_joinid feature_id feature_name feature_length #> colnames: NULL #> colData names(21): soma_joinid dataset_id ... tissue_general #>   tissue_general_ontology_term_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"}]
