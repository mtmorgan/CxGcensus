[{"path":"https://mtmorgan.github.io/CxGcensus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer. Chan Zuckerberg Initiative DAF CZF2019-002443. Funder.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2023). CxGcensus: Discover Retrieve 'CELLxGENE' Census Data Sets. R package version 0.0.0.9001, https://mtmorgan.github.io/CxGcensus/.","code":"@Manual{,   title = {CxGcensus: Discover and Retrieve 'CELLxGENE' Census Data Sets},   author = {Martin Morgan},   year = {2023},   note = {R package version 0.0.0.9001},   url = {https://mtmorgan.github.io/CxGcensus/}, }"},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"cxgcensus","dir":"","previous_headings":"","what":"Discover and Retrieve CELLxGENE Census Data Sets ","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"CxGcensus alternative R client CELLxGENE census. emaphsizes use cases related data discovery, uses -memory -disk caches reduce latency associated repeated queries.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"Install CxGcensus GitHub :","code":"## install.packages(\"devtools\") devtools::install_github(\"mtmorgan/CxGcensus\")"},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"Load package Discover datasets available census Summarize information cells census Learn features (genes) , e.g., homo_sapiens datasets census","code":"library(CxGcensus) datasets() #> # A tibble: 562 × 8 #>    soma_joinid collection_id           collection_name collection_doi dataset_id #>          <int> <chr>                   <chr>           <chr>          <chr>      #>  1           0 6b701826-37bb-4356-979… Abdominal Whit… <NA>           9d8e5dca-… #>  2           1 4195ab4c-20bd-4cd3-8b3… A spatially re… <NA>           a6388a6f-… #>  3           2 4195ab4c-20bd-4cd3-8b3… A spatially re… <NA>           842c6f5d-… #>  4           3 4195ab4c-20bd-4cd3-8b3… A spatially re… <NA>           74520626-… #>  5           4 4195ab4c-20bd-4cd3-8b3… A spatially re… <NA>           396a9124-… #>  6           5 74e10dc4-cbb2-4605-a18… Spatial proteo… 10.1016/j.cel… e84f2780-… #>  7           6 74e10dc4-cbb2-4605-a18… Spatial proteo… 10.1016/j.cel… dfdf1ae2-… #>  8           7 74e10dc4-cbb2-4605-a18… Spatial proteo… 10.1016/j.cel… d1cbed97-… #>  9           8 74e10dc4-cbb2-4605-a18… Spatial proteo… 10.1016/j.cel… b03e4ef8-… #> 10           9 6d203948-a779-4b69-9b3… Differential c… 10.1016/j.cel… f1f123cc-… #> # ℹ 552 more rows #> # ℹ 3 more variables: dataset_title <chr>, dataset_h5ad_path <chr>, #> #   dataset_total_cell_count <int> summary_cell_counts() |>     filter(category == \"sex\") |>     select(         organism, label,         unique_cell_count, total_cell_count     ) #> # A tibble: 6 × 4 #>   organism     label   unique_cell_count total_cell_count #>   <chr>        <chr>               <int>            <int> #> 1 Homo sapiens female           14516846         22513226 #> 2 Homo sapiens male             17097019         28197731 #> 3 Homo sapiens unknown           2145022          3083771 #> 4 Mus musculus female            1066585          1431227 #> 5 Mus musculus male              1655113          2462185 #> 6 Mus musculus unknown            192620           192620 feature_data(\"homo_sapiens\") #> # A tibble: 60,664 × 4 #>    soma_joinid feature_id      feature_name  feature_length #>          <int> <chr>           <chr>                  <int> #>  1           0 ENSG00000243485 MIR1302-2HG             1021 #>  2           1 ENSG00000237613 FAM138A                 1219 #>  3           2 ENSG00000186092 OR4F5                   2618 #>  4           3 ENSG00000238009 RP11-34P13.7            3726 #>  5           4 ENSG00000239945 RP11-34P13.8            1319 #>  6           5 ENSG00000239906 RP11-34P13.14            323 #>  7           6 ENSG00000241860 RP11-34P13.13           7559 #>  8           7 ENSG00000241599 RP11-34P13.9             457 #>  9           8 ENSG00000286448 AP006222.3               736 #> 10           9 ENSG00000236601 RP4-669L17.2            1095 #> # ℹ 60,654 more rows"},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"session-information","dir":"","previous_headings":"","what":"Session information","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"README compiled CxGcensus version 0.0.0.9001. Full session info :","code":"sessionInfo() #> R version 4.3.0 Patched (2023-05-01 r84362) #> Platform: aarch64-apple-darwin21.6.0 (64-bit) #> Running under: macOS Monterey 12.6.6 #>  #> Matrix products: default #> BLAS:   /Users/ma38727/bin/R-4-3-branch/lib/libRblas.dylib  #> LAPACK: /Users/ma38727/bin/R-4-3-branch/lib/libRlapack.dylib;  LAPACK version 3.11.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] CxGcensus_0.0.0.9001 RcppSpdlog_0.0.13    dplyr_1.1.2          #>  #> loaded via a namespace (and not attached): #>  [1] utf8_1.2.3                  generics_0.1.3              #>  [3] spdl_0.0.5                  xml2_1.3.4                  #>  [5] tiledbsoma_0.0.0.9028       lattice_0.21-8              #>  [7] digest_0.6.31               magrittr_2.0.3              #>  [9] tiledb_0.19.1.8             evaluate_0.21               #> [11] grid_4.3.0                  aws.s3_0.3.21               #> [13] aws.signature_0.6.0         fastmap_1.1.1               #> [15] jsonlite_1.8.5              Matrix_1.5-4.1              #> [17] urltools_1.7.3              httr_1.4.6                  #> [19] purrr_1.0.1                 fansi_1.0.4                 #> [21] cellxgene.census_0.0.0.9000 cli_3.6.1                   #> [23] rlang_1.1.1                 triebeard_0.4.1             #> [25] bit64_4.0.5                 withr_2.5.0                 #> [27] base64enc_0.1-3             cachem_1.0.8                #> [29] yaml_2.3.7                  tools_4.3.0                 #> [31] nanotime_0.3.7              memoise_2.0.1               #> [33] curl_5.0.1                  assertthat_0.2.1            #> [35] vctrs_0.6.3                 R6_2.5.1                    #> [37] zoo_1.8-12                  lifecycle_1.0.3             #> [39] fs_1.6.2                    bit_4.0.5                   #> [41] arrow_12.0.1                pkgconfig_2.0.3             #> [43] pillar_1.9.0                glue_1.6.2                  #> [45] data.table_1.14.8           Rcpp_1.0.10                 #> [47] xfun_0.39                   tibble_3.2.1                #> [49] tidyselect_1.2.0            knitr_1.43                  #> [51] htmltools_0.5.5             rmarkdown_2.22              #> [53] compiler_4.3.0              RcppCCTZ_0.2.12"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":null,"dir":"Reference","previous_headings":"","what":"On-disk cache management — cache_directory","title":"On-disk cache management — cache_directory","text":"cache_directory() reports path -disk cache particular census. cache_info() summarizes information files cache. cache() returns object used manage cache.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"On-disk cache management — cache_directory","text":"","code":"cache_directory(id = census_id())  cache_info(id = census_id())  cache(id = census_id())"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"On-disk cache management — cache_directory","text":"id character(1) unique identifier associated particular census snapshot, returned census_id().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"On-disk cache management — cache_directory","text":"cache_directory() returns character(1) file path location cache associated census id. cache_info() returns tibble file name, size, 'mtime' (last-modified time). mtime used cache_disk() manage size age objects cache. File names hash function arguments body cache; possible know transparently file corresponds memoized function. cache() returns object created cachem::chach_disk() can used query delete items cache.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"On-disk cache management — cache_directory","text":"-disk cache created managed cache_disk() function cachem package. Consult package details working object.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"On-disk cache management — cache_directory","text":"","code":"cache_directory() #> [1] \"/home/runner/.cache/R/CxGcensus/1598cfd\"  cache_info() #> # A tibble: 0 × 3 #> # ℹ 3 variables: file <chr>, size <dbl>, mtime <dttm>"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"Obtain reference CELLxGENE 'SOMA' collection","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"","code":"census(census_version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)  census_id(...)"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census_version see ?cellxgene.census::open_soma uri see ?cellxgene.census::open_soma tiledbsoma_ctx see ?cellxgene.census::open_soma ... arguments passed census().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() returns tiledbsoma::SOMACollection object. Details census_version available census()$get_metadata() census_id() returns 7-character git commit sha uniquely identifies current release census.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() 'memoised', requiring high-latency internet access first use.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"","code":"census() #> <SOMACollection> #>   uri: s3://cellxgene-data-public/cell-census/2023-05-15/soma/  #>   groups: census_data*, census_info*  census()$get_metadata() #> $created_on #> [1] \"2023-05-15T22:34:37+00:00\" #> attr(,\"key\") #> [1] \"created_on\" #>  #> $git_commit_sha #> [1] \"1598cfd\" #> attr(,\"key\") #> [1] \"git_commit_sha\" #>  #> $soma_encoding_version #> [1] \"1\" #> attr(,\"key\") #> [1] \"soma_encoding_version\" #>  #> $soma_object_type #> [1] \"SOMACollection\" #> attr(,\"key\") #> [1] \"soma_object_type\" #>   census_id() #> [1] \"1598cfd\""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Discover census datasets, cells, features, and observations — datasets","title":"Discover census datasets, cells, features, and observations — datasets","text":"datasets() queries CELLxGENE datasets used constructing census. summary_cell_counts() reports facets (e.g., sex) levels (e.g., male, female) census, number cells associated facet level. feature_data() reports information features (genes) present census.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discover census datasets, cells, features, and observations — datasets","text":"","code":"datasets(census = NULL)  summary_cell_counts(census = NULL)  feature_data(organism = c(\"homo_sapiens\", \"mus_musculus\"), census = NULL)"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discover census datasets, cells, features, and observations — datasets","text":"census tiledbsoma::SOMACollection object returned census(). NULL, default returned census(). organism one 'homo_sapiens' 'mus_musculus'. Default: 'homo_sapiens'.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discover census datasets, cells, features, and observations — datasets","text":"datasets() returns tibble information collections datasets represented census. summary_cell_counts() returns tibble summarizing organism, facets (category, e.g., 'sex') levels (label, e.g., 'female') represented data, unique total cell counts facet level. feature_data() returns tibble columns describing feature (gene) organism.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discover census datasets, cells, features, and observations — datasets","text":"datasets(), summary_cell_counts(), feature_data() 'memoised' expensive first use. 'tibble' returned functions memoised disk, re-using function fast even across sessions. See ?cache_info() details cache management.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discover census datasets, cells, features, and observations — datasets","text":"","code":"datasets() |>     glimpse() #> Rows: 562 #> Columns: 8 #> $ soma_joinid              <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,… #> $ collection_id            <chr> \"6b701826-37bb-4356-9792-ff41fc4c3161\", \"4195… #> $ collection_name          <chr> \"Abdominal White Adipose Tissue\", \"A spatiall… #> $ collection_doi           <chr> NA, NA, NA, NA, NA, \"10.1016/j.cell.2021.12.0… #> $ dataset_id               <chr> \"9d8e5dca-03a3-457d-b7fb-844c75735c83\", \"a638… #> $ dataset_title            <chr> \"22 integrated samples\", \"scRNA-seq data - my… #> $ dataset_h5ad_path        <chr> \"9d8e5dca-03a3-457d-b7fb-844c75735c83.h5ad\", … #> $ dataset_total_cell_count <int> 72335, 30789, 714331, 76567, 12510, 167598, 4…  summary_cell_counts() |>     count(category) #> # A tibble: 9 × 2 #>   category                    n #>   <chr>                   <int> #> 1 all                         2 #> 2 assay                      29 #> 3 cell_type                 830 #> 4 disease                    73 #> 5 self_reported_ethnicity    27 #> 6 sex                         6 #> 7 suspension_type             2 #> 8 tissue                    278 #> 9 tissue_general             88  ## number of cells from female, male, and 'unknown' samples in ## humans and mice summary_cell_counts() |>     filter(category == \"sex\") |>     select(         organism, label,         unique_cell_count, total_cell_count     ) #> # A tibble: 6 × 4 #>   organism     label   unique_cell_count total_cell_count #>   <chr>        <chr>               <int>            <int> #> 1 Homo sapiens female           14516846         22513226 #> 2 Homo sapiens male             17097019         28197731 #> 3 Homo sapiens unknown           2145022          3083771 #> 4 Mus musculus female            1066585          1431227 #> 5 Mus musculus male              1655113          2462185 #> 6 Mus musculus unknown            192620           192620  feature_data()  # default: homo_sapiens #> # A tibble: 60,664 × 4 #>    soma_joinid feature_id      feature_name  feature_length #>          <int> <chr>           <chr>                  <int> #>  1           0 ENSG00000243485 MIR1302-2HG             1021 #>  2           1 ENSG00000237613 FAM138A                 1219 #>  3           2 ENSG00000186092 OR4F5                   2618 #>  4           3 ENSG00000238009 RP11-34P13.7            3726 #>  5           4 ENSG00000239945 RP11-34P13.8            1319 #>  6           5 ENSG00000239906 RP11-34P13.14            323 #>  7           6 ENSG00000241860 RP11-34P13.13           7559 #>  8           7 ENSG00000241599 RP11-34P13.9             457 #>  9           8 ENSG00000286448 AP006222.3               736 #> 10           9 ENSG00000236601 RP4-669L17.2            1095 #> # ℹ 60,654 more rows feature_data(\"mus_musculus\") #> # A tibble: 52,392 × 4 #>    soma_joinid feature_id         feature_name  feature_length #>          <int> <chr>              <chr>                  <int> #>  1           0 ENSMUSG00000109644 0610005C13Rik           3583 #>  2           1 ENSMUSG00000108652 0610006L08Rik           2128 #>  3           2 ENSMUSG00000007777 0610009B22Rik            998 #>  4           3 ENSMUSG00000086714 0610009E02Rik           1803 #>  5           4 ENSMUSG00000043644 0610009L18Rik            619 #>  6           5 ENSMUSG00000042208 0610010F05Rik           5226 #>  7           6 ENSMUSG00000020831 0610010K14Rik           1896 #>  8           7 ENSMUSG00000089755 0610012D04Rik            531 #>  9           8 ENSMUSG00000107002 0610012G03Rik           1445 #> 10           9 ENSMUSG00000046683 0610025J13Rik           1121 #> # ℹ 52,382 more rows"}]
