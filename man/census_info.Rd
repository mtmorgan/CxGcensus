% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/census_info.R
\name{datasets}
\alias{datasets}
\alias{summary_cell_counts}
\alias{feature_data}
\alias{cell_data}
\title{Discover census datasets, cells, features, and observations}
\usage{
datasets(...)

summary_cell_counts(...)

feature_data(organism = c("homo_sapiens", "mus_musculus"), ...)

cell_data(organism = c("homo_sapiens", "mus_musculus"), ...)
}
\arguments{
\item{...}{arguments passed to \code{\link[=census]{census()}}, specifying the census
release to be used. When missing, the default (current stable)
census is used.}

\item{organism}{one of 'homo_sapiens' or 'mus_musculus'. Default:
'homo_sapiens'.}
}
\value{
\code{datasets()} returns a tibble with information about the
collections and datasets represented in the census.

\code{summary_cell_counts()} returns a tibble summarizing the
organism, facets (\code{category}, e.g., 'sex') and levels (\code{label},
e.g., 'female') represented in the data, and unique and total
cell counts in each facet and level.

\code{feature_data()} returns a tibble with columns describing
each feature (gene) in \code{organism}.

\code{cell_data()} returns a dbplyr-based tibble of cell
annotations. An aesthetic problem is that the 'connection' to
the database is not available to the user, and duckdb warns
that \verb{Database is garbage-collected...}; this message can be
ignored.
}
\description{
\code{datasets()} queries CELLxGENE for datasets used in
constructing the census.

\code{summary_cell_counts()} reports the facets (e.g., sex)
and levels (e.g., male, female) in the census, and the number
of cells associated with each facet and level.

\code{feature_data()} reports information about features
(genes) present in the census.

\code{cell_data()} reports information about all cells in
the census.
}
\details{
\code{datasets()}, \code{summary_cell_counts()}, an \code{feature_data()} are
'memoised' so that they are only expensive on their first use. The
'tibble' returned by these functions is memoised to disk, so that
re-using the function is fast even across sessions. See
\code{?cache_info()} for details on cache management.

\code{cell_data()} is memoised to disk. The data is large (e.g., more
than 50 million rows for \emph{Homo sapiens}) so the initial download
can be time-consuming (10's of minutes). During download in an
interactive session, the number of 'chunks' and records are
displayed; for the 2023-05-15 census of \code{homo_sapiens}, there were
more than 52 million records (cells) downloaded in 124 chunks.

The data are stored in a 'duckdb' database. The return value can be
used via \code{dbplyr} for very fast and memory efficient filtering,
selection, and summary.
}
\examples{
datasets() |>
    glimpse()

summary_cell_counts() |>
    count(category)

## number of cells from female, male, and 'unknown' samples in
## humans and mice
summary_cell_counts() |>
    filter(category == "sex") |>
    select(
        organism, label,
        unique_cell_count, total_cell_count
    )

feature_data()  # default: homo_sapiens
feature_data("mus_musculus")

\dontrun{
mus <- cell_data("mus_musculus")
mus |>
    count(assay, sort = TRUE)
mus |>
    filter(grepl("diabetes", disease)) |>
    count(disease, sex, tissue)
}

}
