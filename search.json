[{"path":"https://mtmorgan.github.io/CxGcensus/articles/a_discovery_and_retrieval.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"A. Data Discovery and Retrieval","text":"Install CxGcensus GitHub :","code":"## install.packages(\"devtools\") devtools::install_github(\"mtmorgan/CxGcensus\")"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/a_discovery_and_retrieval.html","id":"data-exploration","dir":"Articles","previous_headings":"","what":"Data exploration","title":"A. Data Discovery and Retrieval","text":"Load package census package versions using Discover datasets used construct census dataset_id collection_id can used cellxgenedp package programmatic retrieval visualization individual datasets. organisms present census (use calls feature_data() observation_data()) available Summarize information cells census Learn features (genes) , e.g., homo_sapiens datasets census Observation (cell) data annotations available observation_data(). strategy adopted download data local duckdb database. Download can time-consuming, results ‘memoised’ subsequent calls --less instantaneous. columns available cross-dataset analysis straight-forward summarize query data, e.g., number different types assays represented, studies diabetes. Use ggplot2 visualize tissue type assay.  soma_joinid tibbles returned feature_data() observation_data() important retrieving counts.","code":"library(CxGcensus) census()$get_metadata() |>     lapply(as.vector) |>     str() #> List of 4 #>  $ created_on           : chr \"2023-07-25T13:50:53+00:00\" #>  $ git_commit_sha       : chr \"75c2fc7\" #>  $ soma_encoding_version: chr \"1\" #>  $ soma_object_type     : chr \"SOMACollection\" packageVersion(\"CxGcensus\") #> [1] '0.0.0.9026' tiledbsoma::show_package_versions() #> tiledbsoma:    1.4.3 #> tiledb-r:      0.20.3 #> tiledb core:   2.16.2 #> libtiledbsoma: libtiledb=2.16.2 #> R:             R version 4.3.1 (2023-06-16) #> OS:            Ubuntu 22.04.3 LTS datasets() #> # A tibble: 593 × 8 #>    soma_joinid collection_id           collection_name collection_doi dataset_id #>          <int> <chr>                   <chr>           <chr>          <chr>      #>  1           0 e2c257e7-6f79-487c-b81… Spatial multio… 10.1038/s4158… f171db61-… #>  2           1 e2c257e7-6f79-487c-b81… Spatial multio… 10.1038/s4158… ecf2e08e-… #>  3           2 e2c257e7-6f79-487c-b81… Spatial multio… 10.1038/s4158… 74cff64f-… #>  4           3 f7cecffa-00b4-4560-a29… Mapping single… 10.1016/j.cce… 5af90777-… #>  5           4 3f50314f-bdc9-40c6-8e4… Single-cell se… 10.1016/j.cce… bd65a70f-… #>  6           5 e5f58829-1a66-40b5-a62… Tabula Sapiens  10.1126/scien… ff45e623-… #>  7           6 e5f58829-1a66-40b5-a62… Tabula Sapiens  10.1126/scien… f01bdd17-… #>  8           7 e5f58829-1a66-40b5-a62… Tabula Sapiens  10.1126/scien… e6a11140-… #>  9           8 e5f58829-1a66-40b5-a62… Tabula Sapiens  10.1126/scien… e5c63d94-… #> 10           9 e5f58829-1a66-40b5-a62… Tabula Sapiens  10.1126/scien… d8732da6-… #> # ℹ 583 more rows #> # ℹ 3 more variables: dataset_title <chr>, dataset_h5ad_path <chr>, #> #   dataset_total_cell_count <int> census_names() #> [1] \"mus_musculus\" \"homo_sapiens\" summary_cell_counts() |>     filter(category == \"sex\") |>     select(         organism, label,         unique_cell_count, total_cell_count     ) #> # A tibble: 6 × 4 #>   organism     label   unique_cell_count total_cell_count #>   <chr>        <chr>               <int>            <int> #> 1 Homo sapiens female           13955052         22198837 #> 2 Homo sapiens male             17152628         30950702 #> 3 Homo sapiens unknown           2256562          3251334 #> 4 Mus musculus female            1467473          1832115 #> 5 Mus musculus male              2423438          3230510 #> 6 Mus musculus unknown            192620           192620 feature_data(\"mus_musculus\") #> # A tibble: 52,392 × 4 #>    soma_joinid feature_id         feature_name feature_length #>          <int> <chr>              <chr>                 <int> #>  1           0 ENSMUSG00000051951 Xkr4                   6094 #>  2           1 ENSMUSG00000089699 Gm1992                  250 #>  3           2 ENSMUSG00000102343 Gm37381                1364 #>  4           3 ENSMUSG00000025900 Rp1                   12311 #>  5           4 ENSMUSG00000025902 Sox17                  4772 #>  6           5 ENSMUSG00000104328 Gm37323                2773 #>  7           6 ENSMUSG00000033845 Mrpl15                 8487 #>  8           7 ENSMUSG00000025903 Lypla1                 7145 #>  9           8 ENSMUSG00000104217 Gm37988                 825 #> 10           9 ENSMUSG00000033813 Tcea1                  3017 #> # ℹ 52,382 more rows mus <- observation_data(\"mus_musculus\") mus #> # Source:   table<obs> [?? x 21] #> # Database: DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/7c4d6b6a4986.duckdb] #>    soma_joinid dataset_id                 assay assay_ontology_term_id cell_type #>        <int64> <chr>                      <chr> <chr>                  <chr>     #>  1           0 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L5/6 nea… #>  2           1 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L4/5 int… #>  3           2 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L2/3-6 i… #>  4           3 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            hippocam… #>  5           4 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L6 corti… #>  6           5 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L4/5 int… #>  7           6 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L6b glut… #>  8           7 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L4/5 int… #>  9           8 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L4/5 int… #> 10           9 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L6b glut… #> # ℹ more rows #> # ℹ 16 more variables: cell_type_ontology_term_id <chr>, #> #   development_stage <chr>, development_stage_ontology_term_id <chr>, #> #   disease <chr>, disease_ontology_term_id <chr>, donor_id <chr>, #> #   is_primary_data <lgl>, self_reported_ethnicity <chr>, #> #   self_reported_ethnicity_ontology_term_id <chr>, sex <chr>, #> #   sex_ontology_term_id <chr>, suspension_type <chr>, tissue <chr>, … mus |>     colnames() #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"self_reported_ethnicity\"                  #> [14] \"self_reported_ethnicity_ontology_term_id\" #> [15] \"sex\"                                      #> [16] \"sex_ontology_term_id\"                     #> [17] \"suspension_type\"                          #> [18] \"tissue\"                                   #> [19] \"tissue_ontology_term_id\"                  #> [20] \"tissue_general\"                           #> [21] \"tissue_general_ontology_term_id\" mus |>     count(assay, sort = TRUE) #> # Source:     SQL [9 x 2] #> # Database:   DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/7c4d6b6a4986.duckdb] #> # Ordered by: desc(n) #>   assay                                n #>   <chr>                          <int64> #> 1 10x 3' v2                      2815560 #> 2 10x 3' v3                      1902339 #> 3 Smart-seq2                      221648 #> 4 10x 5' v1                       161525 #> 5 Drop-seq                         80990 #> 6 Smart-seq                        48972 #> 7 10x 3' v1                        21421 #> 8 DroNc-seq                         2768 #> 9 10x 3' transcription profiling      22 mus |>     filter(grepl(\"diabetes\", disease)) |>     count(disease, sex, tissue) #> # Source:   SQL [2 x 4] #> # Database: DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/7c4d6b6a4986.duckdb] #>   disease                  sex    tissue                    n #>   <chr>                    <chr>  <chr>               <int64> #> 1 type 2 diabetes mellitus male   islet of Langerhans   99747 #> 2 type 1 diabetes mellitus female islet of Langerhans   39932 library(ggplot2)  ## 10 most-common tissues; total cell count common_tissues <-     mus |>     count(tissue, sort = TRUE) |>     head(10) |>     collect() |>     pull(tissue) ## assays on each tissue tissue_and_assay <-     mus |>     filter(tissue %in% common_tissues) |>     count(tissue, assay, sort = TRUE) |>     collect() |>     mutate(n = as.integer(n)) ## visualize ggplot(tissue_and_assay) +     aes(x = factor(tissue, levels = common_tissues), y = n, fill = assay) +     geom_bar(position=\"stack\", stat=\"identity\") +     labs(x = \"Tissue\", y = \"Total cell count\") +     coord_flip() +     theme(legend.position = c(.8, .7))"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/a_discovery_and_retrieval.html","id":"experiment-retrieval-as-singlecellexperiment","dir":"Articles","previous_headings":"","what":"Experiment retrieval as SingleCellExperiment","title":"A. Data Discovery and Retrieval","text":"create Bioconductor SingleCellExperiment, perhaps use one Orchestrating Single Cell Analysis Bioconductor (OSCA) workflows, first select desired features observations. illustration choose 100 random genes choose cells brain tissue development stage 20 month old latter. Cells several datasets Use create SingleCellExperiment. experiment counts() sparse (dgCMatrix, Matrix package) matrix, features observations available (Bioconductor DataFrame objects, rather tibbles) via rowData() colData(). data straight-forward work , e.g., removing features counts observed… … summarizing total number reads observed cell","code":"set.seed(12) features <- feature_data(\"mus_musculus\") random_features <-     features |>     slice(sample(nrow(features), 100)) observations <- observation_data(\"mus_musculus\") brain_20mo <-     observations |>     filter(         tissue == \"brain\",         development_stage == \"20 month-old stage and over\"     ) |>     collect() brain_20mo |>     count() #> # A tibble: 1 × 1 #>       n #>   <int> #> 1 52132 brain_20mo |>     count(dataset_id) #> # A tibble: 5 × 2 #>   dataset_id                               n #>   <chr>                                <int> #> 1 3bbb6cf9-72b9-41be-b568-656de6eb18b5 38695 #> 2 58b01044-c5e5-4b0f-8a2d-6ebf951e01ff  3077 #> 3 66ff82b4-9380-469c-bc4b-cfa08eacd325   756 #> 4 98e5ea9f-16d6-47ec-a529-686e76515e39  5180 #> 5 c08f8441-4a10-4748-872a-e70c0bcccdba  4424 sce <- single_cell_experiment(\"mus_musculus\", random_features, brain_20mo) #> creating axis and experiment queries #> retrieving assay_data measurement 'RNA' collection 'X' layer 'raw' as a #> sparse matrix with 100 x 52132 distinct features x observations sce #> class: SingleCellExperiment  #> dim: 100 52132  #> metadata(1): census_metadata #> assays(1): counts #> rownames: NULL #> rowData names(4): soma_joinid feature_id feature_name feature_length #> colnames: NULL #> colData names(21): soma_joinid dataset_id ... tissue_general #>   tissue_general_ontology_term_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): library(SingleCellExperiment) keep_rows <- Matrix::rowSums(counts(sce, withDimnames = FALSE)) != 0 table(keep_rows) #> keep_rows #> FALSE  TRUE  #>    58    42 sce[keep_rows,] #> class: SingleCellExperiment  #> dim: 42 52132  #> metadata(1): census_metadata #> assays(1): counts #> rownames: NULL #> rowData names(4): soma_joinid feature_id feature_name feature_length #> colnames: NULL #> colData names(21): soma_joinid dataset_id ... tissue_general #>   tissue_general_ontology_term_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): hist(     log1p(colSums(counts(sce, withDimnames = FALSE))),     main = \"Counts per cell\",     xlab = \"log(1 + x) counts\", )"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/a_discovery_and_retrieval.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"A. Data Discovery and Retrieval","text":"article compiled CxGcensus version 0.0.0.9026. Full session info :","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2 #>  [3] Biobase_2.60.0              GenomicRanges_1.52.0        #>  [5] GenomeInfoDb_1.36.2         IRanges_2.34.1              #>  [7] S4Vectors_0.38.1            BiocGenerics_0.46.0         #>  [9] MatrixGenerics_1.12.3       matrixStats_1.0.0           #> [11] ggplot2_3.4.3               CxGcensus_0.0.0.9026        #> [13] RcppSpdlog_0.0.14           dplyr_1.1.2                 #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.0        farver_2.1.1            blob_1.2.4              #>  [4] bitops_1.0-7            urltools_1.7.3          arrow_12.0.1.1          #>  [7] RCurl_1.98-1.12         fastmap_1.1.1           duckdb_0.8.1-2          #> [10] digest_0.6.33           lifecycle_1.0.3         magrittr_2.0.3          #> [13] compiler_4.3.1          rlang_1.1.1             sass_0.4.7              #> [16] tools_4.3.1             utf8_1.2.3              yaml_2.3.7              #> [19] data.table_1.14.8       knitr_1.43              S4Arrays_1.0.5          #> [22] labeling_0.4.2          bit_4.0.5               spdl_0.0.5              #> [25] curl_5.0.2              DelayedArray_0.26.7     aws.signature_0.6.0     #> [28] xml2_1.3.5              abind_1.4-5             withr_2.5.0             #> [31] purrr_1.0.2             desc_1.4.2              triebeard_0.4.1         #> [34] grid_4.3.1              fansi_1.0.4             colorspace_2.1-0        #> [37] scales_1.2.1            cli_3.6.1               crayon_1.5.2            #> [40] rmarkdown_2.24          ragg_1.2.5              generics_0.1.3          #> [43] tiledbsoma_1.4.3        httr_1.4.7              DBI_1.1.3               #> [46] cachem_1.0.8            stringr_1.5.0           zlibbioc_1.46.0         #> [49] assertthat_0.2.1        XVector_0.40.0          base64enc_0.1-3         #> [52] vctrs_0.6.3             Matrix_1.5-4.1          jsonlite_1.8.7          #> [55] bit64_4.0.5             systemfonts_1.0.4       jquerylib_0.1.4         #> [58] glue_1.6.2              pkgdown_2.0.7           stringi_1.7.12          #> [61] gtable_0.3.4            aws.s3_0.3.21           munsell_0.5.0           #> [64] nanotime_0.3.7          tibble_3.2.1            pillar_1.9.0            #> [67] htmltools_0.5.6         GenomeInfoDbData_1.2.10 R6_2.5.1                #> [70] dbplyr_2.3.3            textshaping_0.3.6       rprojroot_2.0.3         #> [73] evaluate_0.21           lattice_0.21-8          RcppCCTZ_0.2.12         #> [76] highr_0.10              cellxgene.census_1.5.1  memoise_2.0.1           #> [79] tiledb_0.20.3           bslib_0.5.1             rjsoncons_1.0.0         #> [82] Rcpp_1.0.11             xfun_0.40               fs_1.6.3                #> [85] zoo_1.8-12              pkgconfig_2.0.3"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"B. Dataset Integration","text":"work flow emulates ‘Integrating multi-dataset slices data’ cellxgene-census tutorial, although integtation path uses Bioconductor packages. Start loading CxGcensus SingleCellExperiment packages.","code":"library(CxGcensus) library(SingleCellExperiment)"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"datasets-and-observations","dir":"Articles","previous_headings":"","what":"Datasets and observations","title":"B. Dataset Integration","text":"Select ‘Tabula Muris Sensis’ collection datasets containing ‘liver’ title. Retrieve observations (cells) datasets. Summarize observations assay. two datasets, one 10x Genomics Smart-seq2. dataset consists several male female donors various developmental stage. Retrieve observations SingleCellExperiment. Add feature_id (.e., Ensembl gene identifiers) row names downstream analysis.","code":"liver <-     datasets() |>     dplyr::filter(         collection_name == \"Tabula Muris Senis\",         grepl(\"liver\", dataset_title, ignore.case = TRUE)     ) liver #> # A tibble: 2 × 8 #>   soma_joinid collection_id            collection_name collection_doi dataset_id #>         <int> <chr>                    <chr>           <chr>          <chr>      #> 1         525 0b9d8a04-bb9d-44da-aa27… Tabula Muris S… 10.1038/s4158… 4546e757-… #> 2         547 0b9d8a04-bb9d-44da-aa27… Tabula Muris S… 10.1038/s4158… 6202a243-… #> # ℹ 3 more variables: dataset_title <chr>, dataset_h5ad_path <chr>, #> #   dataset_total_cell_count <int> dataset_ids <- pull(liver, dataset_id) observations <-      observation_data(\"mus_musculus\") |>     dplyr::filter(dataset_id %in% dataset_ids) |>     dplyr::collect() observations |>     dplyr::count(dataset_id, assay) #> # A tibble: 2 × 3 #>   dataset_id                           assay          n #>   <chr>                                <chr>      <int> #> 1 4546e757-34d0-4d17-be06-538318925fcd Smart-seq2  2859 #> 2 6202a243-b713-4e12-9ced-c387f8483dea 10x 3' v2   7294 observations |>     dplyr::count(dataset_id, donor_id, sex, development_stage) #> # A tibble: 21 × 5 #>    dataset_id                           donor_id sex    development_stage      n #>    <chr>                                <chr>    <chr>  <chr>              <int> #>  1 4546e757-34d0-4d17-be06-538318925fcd 18_45_M  male   18 month-old stage   275 #>  2 4546e757-34d0-4d17-be06-538318925fcd 18_46_F  female 18 month-old stage   533 #>  3 4546e757-34d0-4d17-be06-538318925fcd 18_53_M  male   18 month-old stage   372 #>  4 4546e757-34d0-4d17-be06-538318925fcd 24_58_M  male   20 month-old stag…   508 #>  5 4546e757-34d0-4d17-be06-538318925fcd 24_59_M  male   20 month-old stag…   440 #>  6 4546e757-34d0-4d17-be06-538318925fcd 3_11_M   male   3 month-old stage    420 #>  7 4546e757-34d0-4d17-be06-538318925fcd 3_56_F   female 3 month-old stage     82 #>  8 4546e757-34d0-4d17-be06-538318925fcd 3_57_F   female 3 month-old stage     79 #>  9 4546e757-34d0-4d17-be06-538318925fcd 3_9_M    male   3 month-old stage    150 #> 10 6202a243-b713-4e12-9ced-c387f8483dea 1-M-62   male   4 weeks              471 #> # ℹ 11 more rows sce <- single_cell_experiment(     \"mus_musculus\", feature_data(\"mus_musculus\"), observations ) #> creating axis and experiment queries #> retrieving assay_data measurement 'RNA' collection 'X' layer 'raw' as a #> sparse matrix with 52392 x 10153 distinct features x observations rownames(sce) <- rowData(sce)$feature_id sce #> class: SingleCellExperiment  #> dim: 52392 10153  #> metadata(1): census_metadata #> assays(1): counts #> rownames(52392): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000118538 ENSMUSG00000084217 #> rowData names(4): soma_joinid feature_id feature_name feature_length #> colnames: NULL #> colData names(21): soma_joinid dataset_id ... tissue_general #>   tissue_general_ontology_term_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"single-dataset-processing","dir":"Articles","previous_headings":"","what":"Single dataset processing","title":"B. Dataset Integration","text":"deviate cellxgene-census tutorial performing preliminary steps data set. prelminary QC, normalization, variance modeling dimensionality reduction dataset separately, Following Chapter 1 ‘Multisample’ section Orchestrating Single Cell Analysis Bioconductor. ’ll use following packages Start creating separate Smart-seq2 10x SingleCellExperiments. Smart-seq2 mRNA represents entire expressed protien, longer genes inherently mRNA. Try correct dividing read counts gene length. set metadata() Smart-seq2 dataset empty list, metadata duplicated two datasets combined later stage. following code chunk, Chapter 1, performs step Smart-seq2 10x datasets. Bind resulting objects together","code":"library(scater) library(scran) library(BiocSingular) smartseq <- sce[, sce$assay == \"Smart-seq2\"] tenx <- sce[, sce$assay != \"Smart-seq2\"] x <- counts(smartseq, withDimnames = FALSE) x <- t( t(x) / rowData(smartseq)$feature_length ) counts(smartseq, withDimnames = FALSE) <- x metadata(smartseq) <- list() ## A list of SingleCellExperiments all.sce <- list(smartseq = smartseq, tenx = tenx)  ## QC -- skip currently; no MT gene expression  ## Normalization -- scater all.sce <- lapply(all.sce, logNormCounts)  ## Variance modelling -- scran all.dec <- lapply(all.sce, modelGeneVar) all.hvgs <- lapply(all.dec, getTopHVGs, prop=0.1)  ## Dimensionality reduction -- BiocSingular set.seed(10000) all.sce <- Map(     runPCA, x = all.sce, subset_row = all.hvgs,      MoreArgs = list(ncomponents = 25L, BSPARAM = RandomParam()) )  set.seed(100000) all.sce <- lapply(all.sce, runTSNE, dimred = \"PCA\")  set.seed(1000000) all.sce <- lapply(all.sce, runUMAP, dimred = \"PCA\")  ## Clustering for (n in names(all.sce)) {     g <- buildSNNGraph(all.sce[[n]], k=10, use.dimred='PCA')     clust <- igraph::cluster_walktrap(g)$membership     colLabels(all.sce[[n]])  <- factor(clust) } sce <- do.call(\"cbind\", all.sce) sce #> class: SingleCellExperiment  #> dim: 52392 10153  #> metadata(1): census_metadata #> assays(2): counts logcounts #> rownames(52392): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000118538 ENSMUSG00000084217 #> rowData names(4): soma_joinid feature_id feature_name feature_length #> colnames: NULL #> colData names(23): soma_joinid dataset_id ... sizeFactor label #> reducedDimNames(3): PCA TSNE UMAP #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"dataset-integration","dir":"Articles","previous_headings":"","what":"Dataset integration","title":"B. Dataset Integration","text":"use batchelor package dataset integration. Following Chapter 1, quickCorrect() implements workflow dataset integration includes identifying shared features, scaling batches account differences sequencing depth, computation log-normalized expression values, identification highly variable genes. Data integration uses mutual nearest neighbor (MNN) correction. Visualize final result interactive UMAP using plotUMAP() plotly package; WebGL() makes plot interactive even 100’s thousands cells…","code":"library(batchelor) ## batchelor quick.corrected <- quickCorrect(     all.sce[[1]], all.sce[[2]],     precomputed = all.dec,     PARAM = FastMnnParam(BSPARAM=BiocSingular::RandomParam()) )  quick.sce <- quick.corrected$corrected ## include colData from original sce colData(quick.sce) <- cbind(colData(sce), colData(quick.sce)) quick.sce$batch <- factor(quick.sce$batch) quick.sce #> class: SingleCellExperiment  #> dim: 52392 10153  #> metadata(2): merge.info pca.info #> assays(1): reconstructed #> rownames(52392): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000118538 ENSMUSG00000084217 #> rowData names(1): rotation #> colnames: NULL #> colData names(24): soma_joinid dataset_id ... label batch #> reducedDimNames(1): corrected #> mainExpName: NULL #> altExpNames(0): ## scater set.seed(00101010) quick.sce <- runTSNE(quick.sce, dimred = \"corrected\") quick.sce <- runUMAP(quick.sce, dimred = \"corrected\")  plotUMAP(quick.sce, colour_by=\"cell_type\") |>     plotly::ggplotly() |>     plotly::toWebGL()"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"B. Dataset Integration","text":"article compiled CxGcensus version 0.0.0.9026 following packages","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] batchelor_1.16.0            BiocSingular_1.16.0         #>  [3] scran_1.28.2                scater_1.28.0               #>  [5] ggplot2_3.4.3               scuttle_1.10.2              #>  [7] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2 #>  [9] Biobase_2.60.0              GenomicRanges_1.52.0        #> [11] GenomeInfoDb_1.36.2         IRanges_2.34.1              #> [13] S4Vectors_0.38.1            BiocGenerics_0.46.0         #> [15] MatrixGenerics_1.12.3       matrixStats_1.0.0           #> [17] CxGcensus_0.0.0.9026        RcppSpdlog_0.0.14           #> [19] dplyr_1.1.2                 #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.7            magrittr_2.0.3            #>   [3] ggbeeswarm_0.7.2          rmarkdown_2.24            #>   [5] fs_1.6.3                  zlibbioc_1.46.0           #>   [7] ragg_1.2.5                vctrs_0.6.3               #>   [9] memoise_2.0.1             DelayedMatrixStats_1.22.6 #>  [11] RCurl_1.98-1.12           base64enc_0.1-3           #>  [13] htmltools_0.5.6           S4Arrays_1.0.5            #>  [15] curl_5.0.2                BiocNeighbors_1.18.0      #>  [17] sass_0.4.7                bslib_0.5.1               #>  [19] htmlwidgets_1.6.2         desc_1.4.2                #>  [21] plotly_4.10.2             zoo_1.8-12                #>  [23] cachem_1.0.8              ResidualMatrix_1.10.0     #>  [25] igraph_1.5.1              lifecycle_1.0.3           #>  [27] pkgconfig_2.0.3           rsvd_1.0.5                #>  [29] Matrix_1.5-4.1            R6_2.5.1                  #>  [31] fastmap_1.1.1             GenomeInfoDbData_1.2.10   #>  [33] digest_0.6.33             colorspace_2.1-0          #>  [35] tiledb_0.20.3             rprojroot_2.0.3           #>  [37] dqrng_0.3.0               irlba_2.3.5.1             #>  [39] crosstalk_1.2.0           aws.signature_0.6.0       #>  [41] textshaping_0.3.6         beachmat_2.16.0           #>  [43] labeling_0.4.2            fansi_1.0.4               #>  [45] urltools_1.7.3            httr_1.4.7                #>  [47] abind_1.4-5               compiler_4.3.1            #>  [49] bit64_4.0.5               withr_2.5.0               #>  [51] BiocParallel_1.34.2       viridis_0.6.4             #>  [53] DBI_1.1.3                 rjsoncons_1.0.0           #>  [55] duckdb_0.8.1-2            DelayedArray_0.26.7       #>  [57] bluster_1.10.0            tiledbsoma_1.4.3          #>  [59] tools_4.3.1               vipor_0.4.5               #>  [61] beeswarm_0.4.0            glue_1.6.2                #>  [63] cellxgene.census_1.5.1    grid_4.3.1                #>  [65] Rtsne_0.16                cluster_2.1.4             #>  [67] generics_0.1.3            gtable_0.3.4              #>  [69] tidyr_1.3.0               data.table_1.14.8         #>  [71] ScaledMatrix_1.8.1        metapod_1.8.0             #>  [73] xml2_1.3.5                utf8_1.2.3                #>  [75] XVector_0.40.0            RcppAnnoy_0.0.21          #>  [77] ggrepel_0.9.3             pillar_1.9.0              #>  [79] stringr_1.5.0             limma_3.56.2              #>  [81] lattice_0.21-8            FNN_1.1.3.2               #>  [83] bit_4.0.5                 tidyselect_1.2.0          #>  [85] locfit_1.5-9.8            knitr_1.43                #>  [87] gridExtra_2.3             edgeR_3.42.4              #>  [89] RcppCCTZ_0.2.12           xfun_0.40                 #>  [91] statmod_1.5.0             stringi_1.7.12            #>  [93] lazyeval_0.2.2            yaml_2.3.7                #>  [95] evaluate_0.21             codetools_0.2-19          #>  [97] tibble_3.2.1              cli_3.6.1                 #>  [99] uwot_0.1.16               arrow_12.0.1.1            #> [101] systemfonts_1.0.4         munsell_0.5.0             #> [103] jquerylib_0.1.4           Rcpp_1.0.11               #> [105] triebeard_0.4.1           dbplyr_2.3.3              #> [107] parallel_4.3.1            ellipsis_0.3.2            #> [109] pkgdown_2.0.7             assertthat_0.2.1          #> [111] blob_1.2.4                aws.s3_0.3.21             #> [113] sparseMatrixStats_1.12.2  bitops_1.0-7              #> [115] spdl_0.0.5                viridisLite_0.4.2         #> [117] scales_1.2.1              purrr_1.0.2               #> [119] crayon_1.5.2              rlang_1.1.1               #> [121] cowplot_1.1.1             nanotime_0.3.7"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/c_compare.html","id":"curatedatlasquery","dir":"Articles","previous_headings":"","what":"CuratedAtlasQuery","title":"C. Comparison with CuratedAtlasQuery and cellxgene.census","text":"R package CuratedAtlasQueryR contains independently curated CELLxGENE data sets. Start installing package Load library Retrieve (large) metadata file. Query cells samples ‘African’ ancestry, lung parenchyma tissue, assayed 10x technology, cell type containing string ‘CD4’. Retrieve cells single-cell experiment assay() data DelayedArray matrix counts; nature count described sce_caqr$x_normalization column, case informative. first time observation_data() run, creates local database efficient access. database created ‘chunks’ moderate memory consumption. initial code makes sure memory consumption modest.","code":"remotes::install_github(\"stemangiola/CuratedAtlasQueryR\") library(CuratedAtlasQueryR) metadata <- get_metadata() single_cell_counts <-     metadata |>     dplyr::filter(         ethnicity == \"African\" &         stringr::str_like(assay, \"%10x%\") &         tissue == \"lung parenchyma\" &         stringr::str_like(cell_type, \"%CD4%\")     ) single_cell_counts #> # Source:   SQL [?? x 56] #> # Database: DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1/:memory:] #>    cell_                 sample_ cell_type cell_type_harmonised confidence_class #>    <chr>                 <chr>   <chr>     <chr>                           <dbl> #>  1 ACAGCCGGTCCGTTAA_F02… dc583c… CD4-posi… mait                                5 #>  2 GGGAATGAGCCCAGCT_F02… dc583c… CD4-posi… treg                                3 #>  3 TCTTCGGAGTAGCGGT_F02… dc583c… CD4-posi… cd4 th1/th17                        3 #>  4 CCTTACGAGAGCTGCA_F02… dc583c… CD4-posi… cd4 th1/th17                        3 #>  5 ATCTACTCAATGGAAT_F02… dc583c… CD4-posi… cd4 th17                            3 #>  6 CATCAGACACCGTTGG_F00… 39915d… CD4-posi… immune_unclassified                 5 #>  7 AGTCTTTGTTAGTGGG_F00… 39915d… CD4-posi… immune_unclassified                 1 #>  8 CGCGTTTGTAAGTAGT_F02… dc583c… CD4-posi… immune_unclassified                 5 #>  9 TGGCTGGCAACGATCT_F00… 39915d… CD4-posi… immune_unclassified                 5 #> 10 TTCCCAGAGCAGGCTA_F02… dc583c… CD4-posi… cd4 th1/th17                        3 #> # ℹ more rows #> # ℹ 51 more variables: cell_annotation_azimuth_l2 <chr>, #> #   cell_annotation_blueprint_singler <chr>, #> #   cell_annotation_monaco_singler <chr>, sample_id_db <chr>, #> #   `_sample_name` <chr>, assay <chr>, assay_ontology_term_id <chr>, #> #   file_id_db <chr>, cell_type_ontology_term_id <chr>, #> #   development_stage <chr>, development_stage_ontology_term_id <chr>, … single_cell_counts |>     dplyr::count(dataset_id) #> # Source:   SQL [1 x 2] #> # Database: DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1/:memory:] #>   dataset_id                               n #>   <chr>                                <dbl> #> 1 066943a2-fdac-4b29-b348-40cede398e4e  1571 system.time({     sce_caqr <-         single_cell_counts |>         get_single_cell_experiment() }) #>    user  system elapsed  #>   3.414   0.304  17.246 sce_caqr #> class: SingleCellExperiment  #> dim: 36229 1571  #> metadata(0): #> assays(1): counts #> rownames(36229): A1BG A1BG-AS1 ... ZZEF1 ZZZ3 #> rowData names(0): #> colnames(1571): ACAGCCGGTCCGTTAA_F02526_1 GGGAATGAGCCCAGCT_F02526_1 ... #>   TACAACGTCAGCATTG_SC84_1 CATTCGCTCAATACCG_F02526_1 #> colData names(56): sample_ cell_type ... updated_at_y original_cell_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): class(SummarizedExperiment::assay(sce_caqr)) #> [1] \"DelayedMatrix\" #> attr(,\"package\") #> [1] \"DelayedArray\" range(as(SummarizedExperiment::assay(sce_caqr), \"sparseMatrix\")) #> [1] 0.000000 8.019915 sce_caqr |>     SummarizedExperiment::colData() |>     as.data.frame() |>     dplyr::count(x_normalization) #>   x_normalization    n #> 1          custom 1571 library(CxGcensus) description <- cellxgene.census::get_census_version_description(\"stable\") uri <- description$soma.uri tiledbsoma_ctx <-     cellxgene.census::new_SOMATileDBContext_for_census(description) ## chunk size, from Dirk Eddelbuettel, via slack tiledbsoma_ctx$set(\"soma.init_buffer_bytes\", as.character(1024**2 * 100))  homo <- observation_data(     \"homo_sapiens\", uri = uri, tiledbsoma_ctx = tiledbsoma_ctx ) homo #> # Source:   table<obs> [?? x 21] #> # Database: DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/7f4131cd4804.duckdb] #>    soma_joinid dataset_id                 assay assay_ontology_term_id cell_type #>        <int64> <chr>                      <chr> <chr>                  <chr>     #>  1           0 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            syncytio… #>  2           1 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            placenta… #>  3           2 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            syncytio… #>  4           3 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            syncytio… #>  5           4 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            extravil… #>  6           5 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            placenta… #>  7           6 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            syncytio… #>  8           7 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            extravil… #>  9           8 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            placenta… #> 10           9 f171db61-e57e-4535-a06a-3… 10x … EFO:0009922            syncytio… #> # ℹ more rows #> # ℹ 16 more variables: cell_type_ontology_term_id <chr>, #> #   development_stage <chr>, development_stage_ontology_term_id <chr>, #> #   disease <chr>, disease_ontology_term_id <chr>, donor_id <chr>, #> #   is_primary_data <lgl>, self_reported_ethnicity <chr>, #> #   self_reported_ethnicity_ontology_term_id <chr>, sex <chr>, #> #   sex_ontology_term_id <chr>, suspension_type <chr>, tissue <chr>, … cache_info() #> # A tibble: 11 × 4 #>    file                                      size mtime               path       #>    <chr>                                    <dbl> <dttm>              <chr>      #>  1 d409f8b35fd832c1e2cdea811d247582.rds       150 2023-08-29 17:51:03 /home/run… #>  2 7f4131cd4804.duckdb                  395063296 2023-08-29 17:51:03 /home/run… #>  3 c4dd78afba7f25d1fe942d07374bd72a.rds  63365917 2023-08-29 17:36:53 /home/run… #>  4 26cae4a4f6328986d840fb384046636c.rds    620101 2023-08-29 17:36:00 /home/run… #>  5 ac0d321d29f2cbacf781aacbac786b06.rds       150 2023-08-29 17:35:59 /home/run… #>  6 990eaac6de3bab186dc4d2ecc1caf3c5.rds     52197 2023-08-29 17:35:58 /home/run… #>  7 487378252967ef48da03145213d604be.rds    543852 2023-08-29 17:35:32 /home/run… #>  8 c4756b7a6569bbb0c8f122d6801cc91c.rds     25419 2023-08-29 17:34:40 /home/run… #>  9 92fac332dbd9441e88949c30a8ff541f.rds       253 2023-08-29 17:34:31 /home/run… #> 10 a357c91923a250bcb2df9dce38c426f4.rds       253 2023-08-29 17:33:55 /home/run… #> 11 7c4d6b6a4986.duckdb                   34091008 2023-08-29 17:33:31 /home/run… obs_query <-     homo |>     filter(         self_reported_ethnicity == \"African\", # 431882 cells         tissue == \"lung parenchyma\",          # 189662 cells         assay %LIKE% \"%10x%\",                 # 189662 cells         cell_type %LIKE% \"%CD4%\"              # 3371     )  obs_query |>     count(dataset_id, is_primary_data) #> # Source:   SQL [3 x 3] #> # Database: DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/7f4131cd4804.duckdb] #>   dataset_id                           is_primary_data       n #>   <chr>                                <lgl>           <int64> #> 1 9f222629-9e39-47d0-b83f-e08d610c7479 FALSE              1300 #> 2 9f222629-9e39-47d0-b83f-e08d610c7479 TRUE                500 #> 3 066943a2-fdac-4b29-b348-40cede398e4e FALSE              1571  obs_query_exact <-     obs_query |>     filter(dataset_id == \"066943a2-fdac-4b29-b348-40cede398e4e\") |>     collect() feat_query <-     feature_data(\"homo_sapiens\") feat_query_approx <-     feature_data(\"homo_sapiens\") |>     ## not all features are present -- SYMBOL is a very poor choice     ## for identifier     filter(feature_name %in% rownames(sce_caqr)) system.time({     sce_cxg <-         single_cell_experiment(\"homo_sapiens\", feat_query, obs_query_exact) }) #> creating axis and experiment queries #> retrieving assay_data measurement 'RNA' collection 'X' layer 'raw' as a #> sparse matrix with 60664 x 1571 distinct features x observations #>    user  system elapsed  #>  44.178  21.199  96.855 sce_cxg #> class: SingleCellExperiment  #> dim: 60664 1571  #> metadata(1): census_metadata #> assays(1): counts #> rownames: NULL #> rowData names(4): soma_joinid feature_id feature_name feature_length #> colnames: NULL #> colData names(21): soma_joinid dataset_id ... tissue_general #>   tissue_general_ontology_term_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/c_compare.html","id":"cellxgene-census","dir":"Articles","previous_headings":"","what":"cellxgene.census","title":"C. Comparison with CuratedAtlasQuery and cellxgene.census","text":"cellxgene.census following based cellxgene census R Quick Start. Load package. Open connection census ‘soma’ object, retrieve reference ’obs’ervation data. Discover available facets filtering Formulate filter using syntax cellxgene.census Read metadata associated query 1800 cells second dataset; filter include ‘assay’ component; perhaps soma includes datasets available CuratedAtlasQueryR independently harmonized data, suspension_type, hard--understand (!) classification primary data (CuratedAtlasQueryR return dataset 066943a2-fdac-4b29-b348-40cede398e4e) cellxgene.census support representaton SingleCellExperiment; retrieve Seurat object corresponding observations interested .","code":"library(cellxgene.census) soma <- open_soma(     census_version = \"2023-05-15\", uri = uri, tiledbsoma_ctx = tiledbsoma_ctx ) observation_data <- soma$get(\"census_data\")$get(\"homo_sapiens\")$get(\"obs\") observation_data #> <SOMADataFrame> #>   uri: s3://cellxgene-data-public/cell-census/2023-07-25/soma/census_data/homo_sapiens/obs  #>   dimensions: soma_joinid  #>   attributes: dataset_id, assay, assay_ontology_term_id, cell_type, cell_type_ontology_term... obs_colnames <- observation_data$colnames() obs_colnames #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"self_reported_ethnicity\"                  #> [14] \"self_reported_ethnicity_ontology_term_id\" #> [15] \"sex\"                                      #> [16] \"sex_ontology_term_id\"                     #> [17] \"suspension_type\"                          #> [18] \"tissue\"                                   #> [19] \"tissue_ontology_term_id\"                  #> [20] \"tissue_general\"                           #> [21] \"tissue_general_ontology_term_id\" value_filter <- paste(     \"self_reported_ethnicity == 'African'\",     \"tissue == 'lung parenchyma'\",     \"cell_type == 'CD4-positive, alpha-beta T cell'\",     ## assay? any of \"10x 5' v1\", \"10x 3' v2\", \"10x 3' v3\"     sep = \" && \" ) system.time({     observations <-         observation_data$         read(             value_filter = value_filter,             column_names = c(\"assay\", \"cell_type\", \"sex\", \"tissue\", \"tissue_general\", \"suspension_type\", \"disease\")         )                          )$concat() |>         as.data.frame()                             # actually, tibble }) observations observations |>     dplyr::count(dataset_id) observations |>     count(dataset_id, suspension_type, is_primary_data) system.time({     seurat <- cellxgene.census::get_seurat(         census = soma,         organism = \"Homo sapiens\",         obs_value_filter = value_filter     ) })"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/c_compare.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"C. Comparison with CuratedAtlasQuery and cellxgene.census","text":"article compiled CxGcensus version 0.0.0.9026 following packages","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] cellxgene.census_1.5.1    CxGcensus_0.0.0.9026      #> [3] RcppSpdlog_0.0.14         dplyr_1.1.2               #> [5] CuratedAtlasQueryR_0.99.6 #>  #> loaded via a namespace (and not attached): #>   [1] RcppAnnoy_0.0.21            splines_4.3.1               #>   [3] later_1.3.1                 aws.s3_0.3.21               #>   [5] urltools_1.7.3              bitops_1.0-7                #>   [7] tibble_3.2.1                triebeard_0.4.1             #>   [9] polyclip_1.10-4             lifecycle_1.0.3             #>  [11] rprojroot_2.0.3             globals_0.16.2              #>  [13] lattice_0.21-8              MASS_7.3-60                 #>  [15] magrittr_2.0.3              plotly_4.10.2               #>  [17] sass_0.4.7                  rmarkdown_2.24              #>  [19] jquerylib_0.1.4             yaml_2.3.7                  #>  [21] httpuv_1.6.11               Seurat_4.3.0.1              #>  [23] tiledbsoma_1.4.3            sctransform_0.3.5           #>  [25] sp_2.0-0                    spatstat.sparse_3.0-2       #>  [27] reticulate_1.31             cowplot_1.1.1               #>  [29] pbapply_1.7-2               DBI_1.1.3                   #>  [31] RColorBrewer_1.1-3          abind_1.4-5                 #>  [33] zlibbioc_1.46.0             Rtsne_0.16                  #>  [35] GenomicRanges_1.52.0        purrr_1.0.2                 #>  [37] BiocGenerics_0.46.0         RCurl_1.98-1.12             #>  [39] GenomeInfoDbData_1.2.10     IRanges_2.34.1              #>  [41] S4Vectors_0.38.1            ggrepel_0.9.3               #>  [43] irlba_2.3.5.1               listenv_0.9.0               #>  [45] spatstat.utils_3.0-3        goftest_1.2-3               #>  [47] spatstat.random_3.1-5       fitdistrplus_1.1-11         #>  [49] parallelly_1.36.0           pkgdown_2.0.7               #>  [51] leiden_0.4.3                codetools_0.2-19            #>  [53] DelayedArray_0.26.7         xml2_1.3.5                  #>  [55] tidyselect_1.2.0            matrixStats_1.0.0           #>  [57] stats4_4.3.1                base64enc_0.1-3             #>  [59] spatstat.explore_3.2-1      duckdb_0.8.1-2              #>  [61] jsonlite_1.8.7              ellipsis_0.3.2              #>  [63] progressr_0.14.0            ggridges_0.5.4              #>  [65] survival_3.5-5              systemfonts_1.0.4           #>  [67] tools_4.3.1                 ragg_1.2.5                  #>  [69] tiledb_0.20.3               rjsoncons_1.0.0             #>  [71] ica_1.0-3                   Rcpp_1.0.11                 #>  [73] glue_1.6.2                  spdl_0.0.5                  #>  [75] gridExtra_2.3               xfun_0.40                   #>  [77] MatrixGenerics_1.12.3       GenomeInfoDb_1.36.2         #>  [79] HDF5Array_1.28.1            withr_2.5.0                 #>  [81] fastmap_1.1.1               rhdf5filters_1.12.1         #>  [83] fansi_1.0.4                 digest_0.6.33               #>  [85] R6_2.5.1                    mime_0.12                   #>  [87] textshaping_0.3.6           colorspace_2.1-0            #>  [89] scattermore_1.2             tensor_1.5                  #>  [91] RcppCCTZ_0.2.12             spatstat.data_3.0-1         #>  [93] utf8_1.2.3                  tidyr_1.3.0                 #>  [95] generics_0.1.3              data.table_1.14.8           #>  [97] httr_1.4.7                  htmlwidgets_1.6.2           #>  [99] S4Arrays_1.0.5              uwot_0.1.16                 #> [101] pkgconfig_2.0.3             gtable_0.3.4                #> [103] blob_1.2.4                  lmtest_0.9-40               #> [105] SingleCellExperiment_1.22.0 XVector_0.40.0              #> [107] htmltools_0.5.6             SeuratObject_4.1.3          #> [109] scales_1.2.1                Biobase_2.60.0              #> [111] png_0.1-8                   knitr_1.43                  #> [113] reshape2_1.4.4              nlme_3.1-162                #> [115] curl_5.0.2                  cachem_1.0.8                #> [117] zoo_1.8-12                  rhdf5_2.44.0                #> [119] stringr_1.5.0               KernSmooth_2.23-21          #> [121] parallel_4.3.1              miniUI_0.1.1.1              #> [123] arrow_12.0.1.1              nanotime_0.3.7              #> [125] desc_1.4.2                  pillar_1.9.0                #> [127] grid_4.3.1                  vctrs_0.6.3                 #> [129] RANN_2.6.1                  promises_1.2.1              #> [131] dbplyr_2.3.3                xtable_1.8-4                #> [133] cluster_2.1.4               evaluate_0.21               #> [135] cli_3.6.1                   compiler_4.3.1              #> [137] rlang_1.1.1                 crayon_1.5.2                #> [139] future.apply_1.11.0         aws.signature_0.6.0         #> [141] plyr_1.8.8                  fs_1.6.3                    #> [143] stringi_1.7.12              viridisLite_0.4.2           #> [145] deldir_1.0-9                assertthat_0.2.1            #> [147] munsell_0.5.0               lazyeval_0.2.2              #> [149] spatstat.geom_3.2-4         Matrix_1.5-4.1              #> [151] patchwork_1.1.3             bit64_4.0.5                 #> [153] future_1.33.0               ggplot2_3.4.3               #> [155] Rhdf5lib_1.22.0             shiny_1.7.5                 #> [157] SummarizedExperiment_1.30.2 ROCR_1.0-11                 #> [159] igraph_1.5.1                memoise_2.0.1               #> [161] bslib_0.5.1                 bit_4.0.5"},{"path":"https://mtmorgan.github.io/CxGcensus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer. Chan Zuckerberg Initiative DAF CZF2019-002443. Funder.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2023). CxGcensus: Discover Retrieve 'CELLxGENE' Census Data Sets. R package version 0.0.0.9026, https://mtmorgan.github.io/CxGcensus/.","code":"@Manual{,   title = {CxGcensus: Discover and Retrieve 'CELLxGENE' Census Data Sets},   author = {Martin Morgan},   year = {2023},   note = {R package version 0.0.0.9026},   url = {https://mtmorgan.github.io/CxGcensus/}, }"},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"cxgcensus","dir":"","previous_headings":"","what":"Discover and Retrieve CELLxGENE Census Data Sets ","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"CxGcensus alternative R client CELLxGENE census. emaphsizes use cases related data discovery, uses -memory -disk caches reduce latency associated repeated queries. CELLxGENE census internet resource providing access hundreds human mouse single-cell RNA-seq datasets. ‘CxGcensus’ interface resource, allowing discovery download datasets, features (genes), observations (individual cells) across experiments. Datasets, features, observations accessible familiar ‘tibbles’; measures single-cell expression presented R / Bioconductor ‘SingleCellExperiment’ data representation easy integration , example, ‘Orchestrating Single-Cell Analysis Bioconductor’ (OSCA). CxGcensus avialable CRAN Bioconductor, can installed using remotes package. CxGcensus imports two packages available CRAN. tiledbsoma, supported Windows, must installed source, C++ code requires correctly installed compiler (see instructions macOS XCode installation). Install CxGcensus GitHub : also install cellxgene.census CxGcensus uses arrow ‘dataset’ capabilities, must case returns TRUE. case linux, macOS binary installations CRAN. needed install arrow source macOS, success () using brew install apache-arrow (b) cloning arrow GitHub repository, changing apache/R directory, checking release tag version installed brew, building Articles available exploration include . Data Discovery Retrieval B. Dataset Integeration C. Comparison CuratedAtlasQuery cellxgene.census","code":"if (!\"remotes\" %in% rownames(installed.packages()))     install.packages(\"remotes\", repos = \"https://cran.r-project.org\") remotes::install_git(     \"https://github.com/single-cell-data/TileDB-SOMA.git\",     subdir = \"apis/r\" ) remotes::install_github(\"mtmorgan/CxGcensus\") arrow::arrow_info()$capabilities[[\"dataset\"]] brew install apache-arrow # installs, e.g., 13.0.0 git clone https://github.com/apache/arrow/ cd arrow/R git tag | grep 13.0.0 git checkout -b apache-arrow-13.0.0 apache-arrow-13.0.0 R CMD INSTALL ."},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":null,"dir":"Reference","previous_headings":"","what":"On-disk cache management — cache_directory","title":"On-disk cache management — cache_directory","text":"cache_directory() reports path -disk cache particular census. cache_info() summarizes file size last modification time files cache. cache() returns object used manage cache.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"On-disk cache management — cache_directory","text":"","code":"cache_directory(id = census_id())  cache_info(id = census_id())  cache(id = census_id())"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"On-disk cache management — cache_directory","text":"id character(1) unique identifier associated particular census snapshot, returned census_id().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"On-disk cache management — cache_directory","text":"cache_directory() returns character(1) file path location cache associated census id. cache_info() returns tibble file name, size, 'mtime' (last-modified time). mtime used cache_disk() manage size age objects cache. cache() returns object created cachem::chach_disk() can used query delete items cache.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"On-disk cache management — cache_directory","text":"-disk cache created managed cache_disk() function cachem package. Consult package details working object. File names cache hash function arguments body cache; possible know transparently file corresponds memoized function.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"On-disk cache management — cache_directory","text":"","code":"cache_directory() #> [1] \"/home/runner/.cache/R/CxGcensus/75c2fc7\"  cache_info() #> # A tibble: 0 × 4 #> # ℹ 4 variables: file <chr>, size <dbl>, mtime <dttm>, path <chr>  cache() #> <cache_disk> <cachem> #>   Methods: #>     get(key, missing = missing_) #>     set(key, value) #>     exists(key) #>     keys() #>     remove(key) #>     reset() #>     prune() #>     size() #>     destroy() #>     is_destroyed(throw = FALSE) #>     info()"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() queries CELLxGENE particular census. census_version() reports cannonical census version; useful using aliases \"stable\" \"latest\". census_id() reports unique identifier particular census version. census_names() queries census available 'experiments'. CELLxGENE, experiments correspond organisms, e.g., \"homo_sapiens\" \"mus_musculus\". census_versions() queries CELLxGENE server available versions. Versions denoted release date.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"","code":"census(version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)  census_version(version = \"stable\")  census_id(version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)  census_names(version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)  census_versions()"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"version version (date) census use. version = \"stable\" indicates recent stable release; version = \"latest\" recent release. Additional dates available census_versions(). uri uri corresponding census version; usually discovered automatically. tiledbsoma_ctx 'context' providing mostly low-level flags influencing performance tiledbsoma. One illustration functionality body census() function.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() returns tiledbsoma::SOMACollection object. Details census available census()$get_metadata() census_version() returns character(1) version (currently date format \"%Y-%m-%d\"), cannonical representation census version. census_id() returns 7-character git commit sha uniquely identifies current release census. census_names() returns character vector possible values. Use values calls , e.g., feature_data() observation_data(). census_versions() returns tibble column available versions (release dates), 'status' column indicating 'stable' 'latest' versions.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() 'memoised', requiring high-latency internet access first use.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"","code":"census() #> <SOMACollection> #>   uri: s3://cellxgene-data-public/cell-census/2023-07-25/soma/  #>   groups: census_data*, census_info*  census()$get_metadata() #> $created_on #> [1] \"2023-07-25T13:50:53+00:00\" #> attr(,\"key\") #> [1] \"created_on\" #>  #> $git_commit_sha #> [1] \"75c2fc7\" #> attr(,\"key\") #> [1] \"git_commit_sha\" #>  #> $soma_encoding_version #> [1] \"1\" #> attr(,\"key\") #> [1] \"soma_encoding_version\" #>  #> $soma_object_type #> [1] \"SOMACollection\" #> attr(,\"key\") #> [1] \"soma_object_type\" #>   census_version(\"stable\") #> [1] \"2023-07-25\" census_version(\"latest\") #> [1] \"2023-08-25\"  census_id() #> [1] \"75c2fc7\"  census_names() #> [1] \"mus_musculus\" \"homo_sapiens\"  census_versions() #> # A tibble: 9 × 2 #>   version    status #>   <date>     <chr>  #> 1 2023-05-15 NA     #> 2 2023-07-17 NA     #> 3 2023-07-24 NA     #> 4 2023-07-25 stable #> 5 2023-08-01 NA     #> 6 2023-08-08 NA     #> 7 2023-08-14 NA     #> 8 2023-08-22 NA     #> 9 2023-08-25 latest  packageVersion(\"CxGcensus\") #> [1] ‘0.0.0.9026’ tiledbsoma::show_package_versions() #> tiledbsoma:    1.4.3 #> tiledb-r:      0.20.3 #> tiledb core:   2.16.2 #> libtiledbsoma: libtiledb=2.16.2 #> R:             R version 4.3.1 (2023-06-16) #> OS:            Ubuntu 22.04.3 LTS"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Discover census features, observations, and assays (counts) — feature_data","title":"Discover census features, observations, and assays (counts) — feature_data","text":"feature_data() reports information features (genes) present census. observation_data() reports information cells census. assay_data() queries census 'raw' counts RNA-seq data corresponding selected features columns census.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discover census features, observations, and assays (counts) — feature_data","text":"","code":"feature_data(organism, version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)  observation_data(   organism,   version = \"stable\",   uri = NULL,   tiledbsoma_ctx = NULL )  assay_data(   organism,   features,   observations,   version = \"stable\",   uri = NULL,   tiledbsoma_ctx = NULL )"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discover census features, observations, and assays (counts) — feature_data","text":"organism one values returned census_names(), specifically 'homo_sapiens' 'mus_musculus' time writing documentation. version version (date) census use. version = \"stable\" indicates recent stable release; version = \"latest\" recent release. Additional dates available census_versions(). uri uri corresponding census version; usually discovered automatically. tiledbsoma_ctx 'context' providing mostly low-level flags influencing performance tiledbsoma. One illustration functionality body census() function. features tibble, typically derived feature_data() via filter(), select(), etc., containing soma_joinid column. observations tibble, typically derived observation_data() via filter(), select(), etc., containing soma_joinid column.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discover census features, observations, and assays (counts) — feature_data","text":"feature_data() returns tibble columns describing feature (gene) organism. observation_data() returns dbplyr-based tibble cell annotations. aesthetic problem 'connection' database available user, duckdb warns Database garbage-collected...; message can ignored. assay_data() returns sparse matrix (dgCMatrix) summarizing counts found census soma_joinid columns features observations tibble arguments. counts 'raw' layer' 'X' collection 'RNA' measurement experiment.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discover census features, observations, and assays (counts) — feature_data","text":"observation_data() memoised disk. data large (e.g., 50 million rows Homo sapiens) initial download can time-consuming (10's minutes). download interactive session, number 'chunks' records displayed; 2023-05-15 census homo_sapiens, 52 million records (cells) downloaded 124 chunks. data stored 'duckdb' database. return value can used via dbplyr fast memory efficient filtering, selection, summary. Currently, assay_data() single_cell_experiment(), user must ensure features, observations, assay data census organism. Duplicate rows features observations allowed.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discover census features, observations, and assays (counts) — feature_data","text":"","code":"feature_data(\"mus_musculus\") #> # A tibble: 52,392 × 4 #>    soma_joinid feature_id         feature_name feature_length #>          <int> <chr>              <chr>                 <int> #>  1           0 ENSMUSG00000051951 Xkr4                   6094 #>  2           1 ENSMUSG00000089699 Gm1992                  250 #>  3           2 ENSMUSG00000102343 Gm37381                1364 #>  4           3 ENSMUSG00000025900 Rp1                   12311 #>  5           4 ENSMUSG00000025902 Sox17                  4772 #>  6           5 ENSMUSG00000104328 Gm37323                2773 #>  7           6 ENSMUSG00000033845 Mrpl15                 8487 #>  8           7 ENSMUSG00000025903 Lypla1                 7145 #>  9           8 ENSMUSG00000104217 Gm37988                 825 #> 10           9 ENSMUSG00000033813 Tcea1                  3017 #> # ℹ 52,382 more rows  mus <- observation_data(\"mus_musculus\") mus #> # Source:   table<obs> [?? x 21] #> # Database: DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/7c4d6b6a4986.duckdb] #>    soma_joinid dataset_id                 assay assay_ontology_term_id cell_type #>        <int64> <chr>                      <chr> <chr>                  <chr>     #>  1           0 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L5/6 nea… #>  2           1 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L4/5 int… #>  3           2 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L2/3-6 i… #>  4           3 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            hippocam… #>  5           4 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L6 corti… #>  6           5 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L4/5 int… #>  7           6 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L6b glut… #>  8           7 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L4/5 int… #>  9           8 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L4/5 int… #> 10           9 d7291f04-fbbb-4d65-990a-f… 10x … EFO:0009899            L6b glut… #> # ℹ more rows #> # ℹ 16 more variables: cell_type_ontology_term_id <chr>, #> #   development_stage <chr>, development_stage_ontology_term_id <chr>, #> #   disease <chr>, disease_ontology_term_id <chr>, donor_id <chr>, #> #   is_primary_data <lgl>, self_reported_ethnicity <chr>, #> #   self_reported_ethnicity_ontology_term_id <chr>, sex <chr>, #> #   sex_ontology_term_id <chr>, suspension_type <chr>, tissue <chr>, …  mus |>     count(assay, sort = TRUE) #> # Source:     SQL [9 x 2] #> # Database:   DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/7c4d6b6a4986.duckdb] #> # Ordered by: desc(n) #>   assay                                n #>   <chr>                          <int64> #> 1 10x 3' v2                      2815560 #> 2 10x 3' v3                      1902339 #> 3 Smart-seq2                      221648 #> 4 10x 5' v1                       161525 #> 5 Drop-seq                         80990 #> 6 Smart-seq                        48972 #> 7 10x 3' v1                        21421 #> 8 DroNc-seq                         2768 #> 9 10x 3' transcription profiling      22  mus |>     filter(grepl(\"diabetes\", disease)) |>     count(disease, sex, tissue) #> # Source:   SQL [2 x 4] #> # Database: DuckDB 0.8.1 [unknown@Linux 5.15.0-1041-azure:R 4.3.1//home/runner/.cache/R/CxGcensus/7c4d6b6a4986.duckdb] #>   disease                  sex    tissue                    n #>   <chr>                    <chr>  <chr>               <int64> #> 1 type 2 diabetes mellitus male   islet of Langerhans   99747 #> 2 type 1 diabetes mellitus female islet of Langerhans   39932  ## use features and observations as filters for assay (count) data features <-    feature_data(\"mus_musculus\") |>    ## rows 4, 3, 4 of the tibble    slice(c(4:3, 4))  observations <-    observation_data(\"mus_musculus\") |>    ## first two rows of the tibble    head(2) |>    collect()  assay_data(\"mus_musculus\", features, observations) #> creating axis and experiment queries #> retrieving assay_data measurement 'RNA' collection 'X' layer 'raw' as a #> sparse matrix with 2 x 2 distinct features x observations #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>   0 1 #> 3 . . #> 2 . . #> 3 . ."},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Discover census datasets and cell count summaries — datasets","title":"Discover census datasets and cell count summaries — datasets","text":"datasets() queries CELLxGENE datasets used constructing census. summary_cell_counts() reports facets (e.g., sex) levels (e.g., male, female) census, number cells associated facet level.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discover census datasets and cell count summaries — datasets","text":"","code":"datasets(version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)  summary_cell_counts(version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discover census datasets and cell count summaries — datasets","text":"version version (date) census use. version = \"stable\" indicates recent stable release; version = \"latest\" recent release. Additional dates available census_versions(). uri uri corresponding census version; usually discovered automatically. tiledbsoma_ctx 'context' providing mostly low-level flags influencing performance tiledbsoma. One illustration functionality body census() function.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discover census datasets and cell count summaries — datasets","text":"datasets() returns tibble information collections datasets represented census. summary_cell_counts() returns tibble summarizing organism, facets (category, e.g., 'sex') levels (label, e.g., 'female') represented data, unique total cell counts facet level.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discover census datasets and cell count summaries — datasets","text":"datasets(), summary_cell_counts(), feature_data() 'memoised' expensive first use. 'tibble' returned functions memoised disk, re-using function fast even across sessions. See ?cache_info() details cache management.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discover census datasets and cell count summaries — datasets","text":"","code":"datasets() |>     glimpse() #> Rows: 593 #> Columns: 8 #> $ soma_joinid              <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,… #> $ collection_id            <chr> \"e2c257e7-6f79-487c-b81c-39451cd4ab3c\", \"e2c2… #> $ collection_name          <chr> \"Spatial multiomics map of trophoblast develo… #> $ collection_doi           <chr> \"10.1038/s41586-023-05869-0\", \"10.1038/s41586… #> $ dataset_id               <chr> \"f171db61-e57e-4535-a06a-35d8b6ef8f2b\", \"ecf2… #> $ dataset_title            <chr> \"donor_p13_trophoblasts\", \"All donors trophob… #> $ dataset_h5ad_path        <chr> \"f171db61-e57e-4535-a06a-35d8b6ef8f2b.h5ad\", … #> $ dataset_total_cell_count <int> 31497, 67070, 286326, 270855, 167283, 13497, …  summary_cell_counts() |>     count(category) #> # A tibble: 9 × 2 #>   category                    n #>   <chr>                   <int> #> 1 all                         2 #> 2 assay                      28 #> 3 cell_type                 861 #> 4 disease                    69 #> 5 self_reported_ethnicity    27 #> 6 sex                         6 #> 7 suspension_type             2 #> 8 tissue                    286 #> 9 tissue_general             81  ## number of cells from female, male, and 'unknown' samples in ## humans and mice summary_cell_counts() |>     filter(category == \"sex\") |>     select(         organism, label,         unique_cell_count, total_cell_count     ) #> # A tibble: 6 × 4 #>   organism     label   unique_cell_count total_cell_count #>   <chr>        <chr>               <int>            <int> #> 1 Homo sapiens female           13955052         22198837 #> 2 Homo sapiens male             17152628         30950702 #> 3 Homo sapiens unknown           2256562          3251334 #> 4 Mus musculus female            1467473          1832115 #> 5 Mus musculus male              2423438          3230510 #> 6 Mus musculus unknown            192620           192620"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/single_cell_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a SingleCellExperiment from census data — single_cell_experiment","title":"Construct a SingleCellExperiment from census data — single_cell_experiment","text":"single_cell_experiment() queries census assay data corresponding features observations, assembles result SingleCellExperiment. count data accessible using SingleCellExperiment::counts().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/single_cell_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a SingleCellExperiment from census data — single_cell_experiment","text":"","code":"single_cell_experiment(   organism,   features,   observations,   version = \"stable\",   uri = NULL,   tiledbsoma_ctx = NULL )"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/single_cell_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a SingleCellExperiment from census data — single_cell_experiment","text":"organism one values returned census_names(), specifically 'homo_sapiens' 'mus_musculus' time writing documentation. features tibble, typically derived feature_data() via filter(), select(), etc., containing soma_joinid column. observations tibble, typically derived observation_data() via filter(), select(), etc., containing soma_joinid column. version version (date) census use. version = \"stable\" indicates recent stable release; version = \"latest\" recent release. Additional dates available census_versions(). uri uri corresponding census version; usually discovered automatically. tiledbsoma_ctx 'context' providing mostly low-level flags influencing performance tiledbsoma. One illustration functionality body census() function.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/single_cell_experiment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a SingleCellExperiment from census data — single_cell_experiment","text":"single_cell_experiment() requires SingleCellExperiment Bioconductor package installed, e.g., via BiocManager::install(\"SingleCellExperiment\").","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/single_cell_experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a SingleCellExperiment from census data — single_cell_experiment","text":"","code":"features <-    feature_data(\"mus_musculus\") |>    ## rows 4, 3, 4 of the tibble    slice(c(4:3, 4))  observations <-    observation_data(\"mus_musculus\") |>    ## first two rows of the tibble    head(2) |>    collect()  single_cell_experiment(\"mus_musculus\", features, observations) #> creating axis and experiment queries #> retrieving assay_data measurement 'RNA' collection 'X' layer 'raw' as a #> sparse matrix with 2 x 2 distinct features x observations #> class: SingleCellExperiment  #> dim: 3 2  #> metadata(1): census_metadata #> assays(1): counts #> rownames: NULL #> rowData names(4): soma_joinid feature_id feature_name feature_length #> colnames: NULL #> colData names(21): soma_joinid dataset_id ... tissue_general #>   tissue_general_ontology_term_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"}]
