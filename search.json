[{"path":"https://mtmorgan.github.io/CxGcensus/articles/a_discovery_and_retrieval.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"A. Data Discovery and Retrieval","text":"Install CxGcensus GitHub :","code":"## install.packages(\"devtools\") devtools::install_github(\"mtmorgan/CxGcensus\")"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/a_discovery_and_retrieval.html","id":"data-exploration","dir":"Articles","previous_headings":"","what":"Data exploration","title":"A. Data Discovery and Retrieval","text":"Load package census using Discover datasets used construct census dataset_id collection_id can used cellxgenedp package programmatic retrieval visualization individual datasets. organisms present census (use calls feature_data() observation_data()) available Summarize information cells census Learn features (genes) , e.g., homo_sapiens datasets census Observation (cell) data annotations available observation_data(). strategy adopted download data local duckdb database. Download can time-consuming, results ‘memoised’ subsequent calls --less instantaneous. columns available cross-dataset analysis straight-forward summarize query data, e.g., number different types assays represented, studies diabetes. Use ggplot2 visualize tissue type assay. soma_joinid tibbles returned feature_data() observation_data() important retrieving counts.","code":"library(CxGcensus) census()$get_metadata() |>      str() datasets() census_names() summary_cell_counts() |>     filter(category == \"sex\") |>     select(         organism, label,         unique_cell_count, total_cell_count     ) feature_data(\"mus_musculus\") mus <- observation_data(\"mus_musculus\") mus mus |>     colnames() mus |>     count(assay, sort = TRUE) mus |>     filter(grepl(\"diabetes\", disease)) |>     count(disease, sex, tissue) library(ggplot2)  ## 10 most-common tissues; total cell count common_tissues <-     mus |>     count(tissue, sort = TRUE) |>     head(10) |>     collect() |>     pull(tissue) ## assays on each tissue tissue_and_assay <-     mus |>     filter(tissue %in% common_tissues) |>     count(tissue, assay, sort = TRUE) |>     collect() ## visualize ggplot(tissue_and_assay) +     aes(x = factor(tissue, levels = common_tissues), y = n, fill = assay) +     geom_bar(position=\"stack\", stat=\"identity\") +     labs(x = \"Tissue\", y = \"Total cell count\") +     coord_flip() +     theme(legend.position = c(.8, .7))"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/a_discovery_and_retrieval.html","id":"experiment-retrieval-as-singlecellexperiment","dir":"Articles","previous_headings":"","what":"Experiment retrieval as SingleCellExperiment","title":"A. Data Discovery and Retrieval","text":"create Bioconductor SingleCellExperiment, perhaps use one Orchestrating Single Cell Analysis Bioconductor (OSCA) workflows, first select desired features observations. illustration choose 100 random genes choose cells brain tissue development stage 20 month old latter. Cells several datasets Use create SingleCellExperiment. experiment counts() sparse (dgCMatrix, Matrix package) matrix, features observations available (Bioconductor DataFrame objects, rather tibbles) via rowData() colData(). data straight-forward work , e.g., removing features counts observed… … summarizing total number reads observed cell","code":"set.seed(12) features <- feature_data(\"mus_musculus\") random_features <-     features |>     slice(sample(nrow(features), 100)) observations <- observation_data(\"mus_musculus\") brain_20mo <-     observations |>     filter(         tissue == \"brain\",         development_stage == \"20 month-old stage and over\"     ) |>     collect() brain_20mo |>     count() brain_20mo |>     count(dataset_id) sce <- single_cell_experiment(\"mus_musculus\", random_features, brain_20mo) sce library(SingleCellExperiment) keep_rows <- Matrix::rowSums(counts(sce, withDimnames = FALSE)) != 0 table(keep_rows) sce[keep_rows,] hist(     log1p(colSums(counts(sce, withDimnames = FALSE))),     main = \"Counts per cell\",     xlab = \"log(1 + x) counts\", )"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/a_discovery_and_retrieval.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"A. Data Discovery and Retrieval","text":"article compiled CxGcensus version 0.0.0.9012. Full session info :","code":"sessionInfo()"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"B. Dataset Integration","text":"work flow emulates ‘Integrating multi-dataset slices data’ cellxgene-census tutorial, although integtation path uses Bioconductor packages. Start loading CxGcensus SingleCellExperiment packages.","code":"library(CxGcensus) library(SingleCellExperiment)"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"datasets-and-observations","dir":"Articles","previous_headings":"","what":"Datasets and observations","title":"B. Dataset Integration","text":"Select ‘Tabula Muris Sensis’ collection datasets containing ‘liver’ title. Retrieve observations (cells) datasets. Summarize observations assay. two datasets, one 10x Genomics Smart-seq2. dataset consists several male female donors various developmental stage. Retrieve observations SingleCellExperiment. Add feature_id (.e., Ensembl gene identifiers) row names downstream analysis.","code":"liver <-     datasets() |>     dplyr::filter(         collection_name == \"Tabula Muris Senis\",         grepl(\"liver\", dataset_title, ignore.case = TRUE)     ) liver dataset_ids <- pull(liver, dataset_id) observations <-      observation_data(\"mus_musculus\") |>     dplyr::filter(dataset_id %in% dataset_ids) |>     dplyr::collect() observations |>     dplyr::count(dataset_id, assay) observations |>     dplyr::count(dataset_id, donor_id, sex, development_stage) sce <- single_cell_experiment(     \"mus_musculus\", feature_data(\"mus_musculus\"), observations ) rownames(sce) <- rowData(sce)$feature_id sce"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"single-dataset-processing","dir":"Articles","previous_headings":"","what":"Single dataset processing","title":"B. Dataset Integration","text":"deviate cellxgene-census tutorial performing preliminary steps data set. prelminary QC, normalization, variance modeling dimensionality reduction dataset separately, Following Chapter 1 ‘Multisample’ section Orchestrating Single Cell Analysis Bioconductor. ’ll use following packages Start creating separate Smart-seq2 10x SingleCellExperiments. Smart-seq2 mRNA represents entire expressed protien, longer genes inherently mRNA. Try correct dividing read counts gene length. set metadata() Smart-seq2 dataset empty list, metadata duplicated two datasets combined later stage. following code chunk, Chapter 1, performs step Smart-seq2 10x datasets. Bind resulting objects together","code":"library(scater) library(scran) library(BiocSingular) smartseq <- sce[, sce$assay == \"Smart-seq2\"] tenx <- sce[, sce$assay != \"Smart-seq2\"] x <- counts(smartseq, withDimnames = FALSE) x <- t( t(x) / rowData(smartseq)$feature_length ) counts(smartseq, withDimnames = FALSE) <- x metadata(smartseq) <- list() ## A list of SingleCellExperiments all.sce <- list(smartseq = smartseq, tenx = tenx)  ## QC -- skip currently; no MT gene expression  ## Normalization -- scater all.sce <- lapply(all.sce, logNormCounts)  ## Variance modelling -- scran all.dec <- lapply(all.sce, modelGeneVar) all.hvgs <- lapply(all.dec, getTopHVGs, prop=0.1)  ## Dimensionality reduction -- BiocSingular set.seed(10000) all.sce <- Map(     runPCA, x = all.sce, subset_row = all.hvgs,      MoreArgs = list(ncomponents = 25L, BSPARAM = RandomParam()) )  set.seed(100000) all.sce <- lapply(all.sce, runTSNE, dimred = \"PCA\")  set.seed(1000000) all.sce <- lapply(all.sce, runUMAP, dimred = \"PCA\")  ## Clustering for (n in names(all.sce)) {     g <- buildSNNGraph(all.sce[[n]], k=10, use.dimred='PCA')     clust <- igraph::cluster_walktrap(g)$membership     colLabels(all.sce[[n]])  <- factor(clust) } sce <- do.call(\"cbind\", all.sce)"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"dataset-integration","dir":"Articles","previous_headings":"","what":"Dataset integration","title":"B. Dataset Integration","text":"use batchelor package dataset integration. Following Chapter 1, quickCorrect() implements workflow dataset integration includes identifying shared features, scaling batches account differences sequencing depth, computation log-normalized expression values, identification highly variable genes. Data integration uses mutual nearest neighbor (MNN) correction. Visualize final result interactive UMAP using plotUMAP() plotly package; WebGL() makes plot interactive even 100’s thousands cells…","code":"library(batchelor) ## batchelor quick.corrected <- quickCorrect(     all.sce[[1]], all.sce[[2]],     precomputed = all.dec,     PARAM = FastMnnParam(BSPARAM=BiocSingular::RandomParam()) )  quick.sce <- quick.corrected$corrected ## include colData from original sce colData(quick.sce) <- cbind(colData(sce), colData(quick.sce)) quick.sce$batch <- factor(quick.sce$batch) quick.sce ## scater set.seed(00101010) quick.sce <- runTSNE(quick.sce, dimred = \"corrected\") quick.sce <- runUMAP(quick.sce, dimred = \"corrected\")  plotUMAP(quick.sce, colour_by=\"cell_type\") |>     plotly::ggplotly() |>     plotly::toWebGL()"},{"path":"https://mtmorgan.github.io/CxGcensus/articles/b_integration.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"B. Dataset Integration","text":"article compiled CxGcensus version 0.0.0.9012 following packages","code":"sessionInfo()"},{"path":"https://mtmorgan.github.io/CxGcensus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer. Chan Zuckerberg Initiative DAF CZF2019-002443. Funder.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2023). CxGcensus: Discover Retrieve 'CELLxGENE' Census Data Sets. R package version 0.0.0.9012, https://mtmorgan.github.io/CxGcensus/.","code":"@Manual{,   title = {CxGcensus: Discover and Retrieve 'CELLxGENE' Census Data Sets},   author = {Martin Morgan},   year = {2023},   note = {R package version 0.0.0.9012},   url = {https://mtmorgan.github.io/CxGcensus/}, }"},{"path":"https://mtmorgan.github.io/CxGcensus/index.html","id":"cxgcensus","dir":"","previous_headings":"","what":"Discover and Retrieve CELLxGENE Census Data Sets ","title":"Discover and Retrieve CELLxGENE Census Data Sets ","text":"CxGcensus alternative R client CELLxGENE census. emaphsizes use cases related data discovery, uses -memory -disk caches reduce latency associated repeated queries. CELLxGENE census internet resource providing access hundreds human mouse single-cell RNA-seq datasets. ‘CxGcensus’ interface resource, allowing discovery download datasets, features (genes), observations (individual cells) across experiments. Datasets, features, observations accessible familiar ‘tibbles’; measures single-cell expression presented R / Bioconductor ‘SingleCellExperiment’ data representation easy integration , example, ‘Orchestrating Single-Cell Analysis Bioconductor’ (OSCA). Install CxGcensus GitHub : Articles available exploration include . Data Discovery Retrieval B. Dataset Integeration","code":"## install.packages(\"devtools\") devtools::install_github(\"mtmorgan/CxGcensus\")"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":null,"dir":"Reference","previous_headings":"","what":"On-disk cache management — cache_directory","title":"On-disk cache management — cache_directory","text":"cache_directory() reports path -disk cache particular census. cache_info() summarizes file size last modification time files cache. cache() returns object used manage cache.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"On-disk cache management — cache_directory","text":"","code":"cache_directory(id = census_id())  cache_info(id = census_id())  cache(id = census_id())"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"On-disk cache management — cache_directory","text":"id character(1) unique identifier associated particular census snapshot, returned census_id().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"On-disk cache management — cache_directory","text":"cache_directory() returns character(1) file path location cache associated census id. cache_info() returns tibble file name, size, 'mtime' (last-modified time). mtime used cache_disk() manage size age objects cache. cache() returns object created cachem::chach_disk() can used query delete items cache.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"On-disk cache management — cache_directory","text":"-disk cache created managed cache_disk() function cachem package. Consult package details working object. File names cache hash function arguments body cache; possible know transparently file corresponds memoized function.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"On-disk cache management — cache_directory","text":"","code":"cache_directory() #> [1] \"/home/runner/.cache/R/CxGcensus/1598cfd\"  cache_info() #> # A tibble: 0 × 3 #> # ℹ 3 variables: file <chr>, size <dbl>, mtime <dttm>  cache() #> <cache_disk> <cachem> #>   Methods: #>     get(key, missing = missing_) #>     set(key, value) #>     exists(key) #>     keys() #>     remove(key) #>     reset() #>     prune() #>     size() #>     destroy() #>     is_destroyed(throw = FALSE) #>     info()"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() queries CELLxGENE particulalr census. census_id() reports unique identifier particular census version. census_names() queries census available 'experiments'. CELLxGENE, experiments correspond organisms, e.g., \"homo_sapiens\" \"mus_musculus\".","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"","code":"census(census_version = \"stable\", uri = NULL, tiledbsoma_ctx = NULL)  census_id(...)  census_names(...)"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census_version see ?cellxgene.census::open_soma uri see ?cellxgene.census::open_soma tiledbsoma_ctx see ?cellxgene.census::open_soma ... arguments passed census(). census object returned census(); present, overrides specifications ....","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() returns tiledbsoma::SOMACollection object. Details census_version available census()$get_metadata() census_id() returns 7-character git commit sha uniquely identifies current release census. census_names() returns character vector possible values. Use values calls , e.g., feature_data() observation_data().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"census() 'memoised', requiring high-latency internet access first use.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a reference to a CELLxGENE 'SOMA' collection — census","text":"","code":"census() #> <SOMACollection> #>   uri: s3://cellxgene-data-public/cell-census/2023-05-15/soma/  #>   groups: census_data*, census_info*  census()$get_metadata() #> $created_on #> [1] \"2023-05-15T22:34:37+00:00\" #> attr(,\"key\") #> [1] \"created_on\" #>  #> $git_commit_sha #> [1] \"1598cfd\" #> attr(,\"key\") #> [1] \"git_commit_sha\" #>  #> $soma_encoding_version #> [1] \"1\" #> attr(,\"key\") #> [1] \"soma_encoding_version\" #>  #> $soma_object_type #> [1] \"SOMACollection\" #> attr(,\"key\") #> [1] \"soma_object_type\" #>   census_id() #> [1] \"1598cfd\"  census_names() #> [1] \"homo_sapiens\" \"mus_musculus\""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Discover census datasets, cells, features, and observations — datasets","title":"Discover census datasets, cells, features, and observations — datasets","text":"datasets() queries CELLxGENE datasets used constructing census. summary_cell_counts() reports facets (e.g., sex) levels (e.g., male, female) census, number cells associated facet level. feature_data() reports information features (genes) present census. observation_data() reports information cells census. assay_data() queries census 'raw' counts RNA-seq data corresponding selected features columns census. single_cell_experiment() queries census assay data corresponding features observations, assembles result SingleCellExperiment. count data accessible using SingleCellExperiment::counts().","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discover census datasets, cells, features, and observations — datasets","text":"","code":"datasets(...)  summary_cell_counts(...)  feature_data(organism, ...)  observation_data(organism, ...)  assay_data(organism, features, observations, ...)  single_cell_experiment(organism, features, observations, ...)"},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discover census datasets, cells, features, and observations — datasets","text":"... arguments passed census(), specifying census release used. missing, default (current stable) census used. organism one values returned census_names(), specifically 'homo_sapiens' 'mus_musculus' time writing documentation. features tibble, typically derived feature_data() via filter(), select(), etc., containing soma_joinid column. observations tibble, typically derived observation_data() via filter(), select(), etc., containing soma_joinid column.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discover census datasets, cells, features, and observations — datasets","text":"datasets() returns tibble information collections datasets represented census. summary_cell_counts() returns tibble summarizing organism, facets (category, e.g., 'sex') levels (label, e.g., 'female') represented data, unique total cell counts facet level. feature_data() returns tibble columns describing feature (gene) organism. observation_data() returns dbplyr-based tibble cell annotations. aesthetic problem 'connection' database available user, duckdb warns Database garbage-collected...; message can ignored. assay_data() returns sparse matrix (dgCMatrix) summarizing counts found census soma_joinid columns features observations tibble arguments. counts 'raw' layer' 'X' collection 'RNA' measurement experiment.","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discover census datasets, cells, features, and observations — datasets","text":"datasets(), summary_cell_counts(), feature_data() 'memoised' expensive first use. 'tibble' returned functions memoised disk, re-using function fast even across sessions. See ?cache_info() details cache management. observation_data() memoised disk. data large (e.g., 50 million rows Homo sapiens) initial download can time-consuming (10's minutes). download interactive session, number 'chunks' records displayed; 2023-05-15 census homo_sapiens, 52 million records (cells) downloaded 124 chunks. data stored 'duckdb' database. return value can used via dbplyr fast memory efficient filtering, selection, summary. Currently, assay_data() single_cell_experiment(), user must ensure features, observations, assay data census organism. Duplicate rows features observations allowed. single_cell_experiment() requires SingleCellExperiment Biocductor package installed, e.g., via BiocManager::install(\"SingleCellExperiment\").","code":""},{"path":"https://mtmorgan.github.io/CxGcensus/reference/census_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discover census datasets, cells, features, and observations — datasets","text":"","code":"datasets() |>     glimpse() #> <SOMACollection> #>   uri: s3://cellxgene-data-public/cell-census/2023-05-15/soma/  #>   groups: census_data*, census_info*  #> not ReadIter #> [[1]] #> Table #> 562 rows x 8 columns #> $soma_joinid <int64 not null> #> $collection_id <large_string not null> #> $collection_name <large_string not null> #> $collection_doi <large_string not null> #> $dataset_id <large_string not null> #> $dataset_title <large_string not null> #> $dataset_h5ad_path <large_string not null> #> $dataset_total_cell_count <int64 not null> #>  #> Error in (function (...) {    if (interactive())         message(\"retrieving datasets...\")    census <- census(...)    stopifnot(inherits(census, \"SOMACollection\"))    print(census)    tbl <- census$get(\"census_info\")$get(\"datasets\")$read(iterated = TRUE)    if (inherits(tbl, \"ReadIter\")) {        tbl <- tbl$concat()    }    else {        message(\"not ReadIter\")        print(tbl)    }    tbl <- as.data.frame(tbl0)    replace_zchar <- function(x) {        x[!nzchar(x)] <- NA_character_        x    }    mutate(tbl, across(where(is.character), replace_zchar))})(): object 'tbl0' not found  summary_cell_counts() |>     count(category) #> Error in census$get(\"census_info\")$get(\"summary_cell_counts\")$read()$concat(): attempt to apply non-function  ## number of cells from female, male, and 'unknown' samples in ## humans and mice summary_cell_counts() |>     filter(category == \"sex\") |>     select(         organism, label,         unique_cell_count, total_cell_count     ) #> Error in census$get(\"census_info\")$get(\"summary_cell_counts\")$read()$concat(): attempt to apply non-function  feature_data(\"mus_musculus\") #> Error in census$get(\"census_data\")$get(organism)$ms$get(\"RNA\")$var$read()$concat(): attempt to apply non-function  mus <- observation_data(\"mus_musculus\") #> Error in iter$read_complete(): attempt to apply non-function mus |>     count(assay, sort = TRUE) #> Error in eval(expr, envir, enclos): object 'mus' not found mus |>     filter(grepl(\"diabetes\", disease)) |>     count(disease, sex, tissue) #> Error in eval(expr, envir, enclos): object 'mus' not found  features <-    feature_data(\"mus_musculus\") |>    ## rows 4, 3, 4 of the tibble    slice(c(4:3, 4)) #> Error in census$get(\"census_data\")$get(organism)$ms$get(\"RNA\")$var$read()$concat(): attempt to apply non-function  observations <-    observation_data(\"mus_musculus\") |>    ## first two rows of the tibble    head(2) |>    collect() #> Error in iter$read_complete(): attempt to apply non-function  counts <- assay_data(features, observations, organism = \"mus_musculus\") #> Error in FUN(X[[i]], ...): object 'features' not found  single_cell_experiment(\"mus_musculus\", features, observations) #> Error in eval(expr, envir, enclos): object 'features' not found"}]
